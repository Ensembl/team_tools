#!/usr/local/bin/perl -Tw

use strict;
use warnings;

#use CGI::Carp qw(fatalsToBrowser);
BEGIN { use lib ($ENV{OTTER_PERL_INC} || q{}) =~ m{([^:]+)}g }

use DBI;
use CGI;
use JSON();

my $cgi = CGI->new;
my $json = JSON->new;

my $db = $cgi->param("db");
my $dbh =
    DBI->connect("DBI:mysql:host=otterlive;port=3324;database=${db}",
                 "ottadmin", "wibble",
                 { RaiseError => 1, AutoCommit => 0 });
my $db_selection =
    $dbh->selectall_arrayref(<<'QUERY', { Slice => { } });
select

    sr.name              as chr_name,
    sr.seq_region_id     as chr_id,
    g.stable_id          as gene_sid,
    g.gene_id            as gene_id,
    g.seq_region_start   as gene_start,
    g.seq_region_end     as gene_end,
    t.stable_id          as transcript_sid,
    t.transcript_id      as transcript_id,
    t.biotype            as transcript_biotype,
    t.seq_region_start   as transcript_start,
    t.seq_region_end     as transcript_end

from       gene                 g
inner join transcript           t    using (gene_id)
inner join transcript_attrib    ta   using (transcript_id)
inner join exon_transcript      extr using (transcript_id)
inner join exon                 ex   using (exon_id)
inner join seq_region           sr   on    (sr.seq_region_id = t.seq_region_id)
inner join attrib_type          at   on    (at.attrib_type_id = ta.attrib_type_id)

where g.is_current
and   t.is_current
and   ex.is_current
and   extr.rank = 1
and   ex.phase = -1
and   at.code = 'cds_start_NF'
and   ta.value = 1

order by sr.name, sr.seq_region_id, g.stable_id, t.stable_id, ex.stable_id

QUERY
$dbh->disconnect;

print $cgi->header("text/plain"), $json->encode($db_selection);
