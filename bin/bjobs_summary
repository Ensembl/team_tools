#! /bin/sh

case "$*" in
    -h|--help)
        printf "Syntax: $0 [ <pattern> ]\n
Summarise bjobs(1) output.  Optionally limit the jobs included to
those with the bjobs output line matching the given Perl regexp.\n\n" >&2
        exit 2
        ;;
esac

[ "$#" -gt 1 ] && echo "($0 ignores parameters after the 1st)" >&2

ARGS=" -u all -P ${LSB_DEFAULTPROJECT:-vertann} "

bjobs -w $ARGS | perl -ane '
 use strict;
 use warnings;
 our ($FMT, $PTN, %num);
 BEGIN {
   $FMT = "%5s %-60s %s\n";
   $PTN = shift @ARGV;
   $PTN = ($PTN eq "" ? undef : qr{$PTN});
 }

 my ($id, $user, $stat, $q, $from, $exec, $name) = @F;
 ($exec, $name) = ("", $exec) if $name =~ /^(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)$/; # bodge
 my $txt = sprintf("%-7s %-6s %-10s %s", $user, $stat, $q, $name);
 if ($txt =~ /^USER /) {
   printf($FMT, "count", $txt, "job ids");
 } elsif (defined $PTN && not $_ =~ $PTN) {
   # ignore job line
 } else {
   push @{ $num{$txt} }, $id;
 }

 END {
   my $N = 0;
   foreach my $txt (sort { @{ $num{$a} } <=> @{ $num{$b} || $a cmp $b } }
                    keys %num) {
     my $n = @{ $num{$txt} };
     $N += $n;
     my $ids = ($n <= 5
                ? sprintf("(%s)", join " ", sort {$a <=> $b} @{ $num{$txt} })
                : "");
     printf($FMT, scalar @{ $num{$txt} }, $txt, $ids);
   }
   printf("%s\n$FMT", "=" x 20, $N, "total", "");
 }
' "$1"
