#! /usr/bin/env perl

use strict;
use warnings;

use List::MoreUtils 'uniq';
use File::Slurp qw( write_file );
use Cwd 'getcwd';


=head1 NAME

server-config-op - operate on Otter Server config repository

=head1 SYNOPSIS

 server-config-op update
 # fetches from origin, then
 # rebases any local commits on each local tracking branch

 git checkout 66 --
 # edit files
 git commit -m 'fixed something'

 git checkout 65
 git cherry-pick -x $( git rev-parse 66 )
 # XXX: could be a useful subcommand

 git checkout root
 # edit files
 git commit -m 'fixed another thing'

 git checkout dev
 server-config-op merge
 # changes from branches (65, 66, root) are merged in their subdirectories
 git push

=head1 DESCRIPTION

=over 4

=item server-config-merge merge [ --force ]

Makes an octopus-like merge of multiple version branches into one
multi-directory tree by B<overwriting> the current tree with the
contents of the branch.

It does this for all existing numbered branches, and the one called
C<root>.

It works for both bare repositories and working copy clones.  However,
in a working copy using this without up-to-date local version branches
will cause confusion (resulting merges could be fast-forwards, but
still stale).  For this reason it only operates on working copies when
forced.

It works with a detached HEAD, but may not produce useful results.

=item server-config-merge update [ <remote> ]

Fetch all the remote tracking branches (with prune option), and tags.
Then ensure all corresponding local branches exist, rebasing any local
commits.

The default remote is C<origin>.

Local branches which persist after the remote has been tagged and
removed are cleanly deleted with a C<git merge --ff> to ensure no
local commits are discarded; this unlikely event is handled tersely.
XXX: tag+rm implemented only in team_tools/saveconf/otter_data/vsn_merge.pl

XXX: Newly created local branches are not handled.  This missing
feature, will be used monthly, workaround by branching on the remote.

=back

=cut

our $DEBUG = 0;
our @RM_FILES; # to unlink in END
our ($GIT_DIR, $BARE);

sub main {
    $| = 1;

    my $op = shift @ARGV || '(nil)';

    # Sanity check repo
    my @l_br = qx( git branch );
    my @r_br = qx( git branch -r );
    my ($br) = (join '', @l_br) =~ m{^\*\s*(.+)$}m;

    my $pwd = getcwd();
    if (-d '.git') {
        $GIT_DIR = '.git';
        $BARE = 0;
    } elsif ($pwd =~ m{\.git$} && -f 'HEAD') {
        $GIT_DIR = $pwd;
        $BARE = 1;
    } else {
        die "Must be at top of clone - I am in $pwd";
    }

    rev_parse('HEAD'); # ensure we have a valid HEAD
    unless ($BARE) {
        run(is_clean => qw( git diff --quiet --exit-code --cached ));
        run(is_clean => qw( git diff --quiet --exit-code ));
    }

    # Do stuff
    if ($op eq 'merge') {
        my @vsn = sort map { /^\*?\s*(\d+|root)$/ ? ($1) : () } @l_br;
        die "Expected some numbered Otter Data version local branches, got (@vsn)\n".
          " Are we in the correct clone?\n Would '$0 update' give me the local branches?" unless @vsn > 3;
        die "Abort: merge on non-central repo is risky"
          unless $BARE || (@ARGV && '--force' eq shift @ARGV);
        die "Abort: expect to merge to a non-version branch, but we are on '$br'\n"
          if !defined $br || $br =~ m{^(\d+|root)$};
        non_merge_warn(HEAD => 10);
        make_merge(@vsn);
        apply_commit() unless $BARE;

    } elsif ($op eq 'update') {
        my $remote = @ARGV ? shift @ARGV : 'origin';
        @r_br = map { m{^\*?\s+$remote/(\S+)$} ? ($1) : () } @r_br;
        @l_br = map { m{^\*?\s+(\S+)$}         ? ($1) : () } @l_br;
        my @vsn = sort map { /^(\d+|root)$/ ? ($1) : () } @r_br;
        die "Expected some numbered Otter Data version remote tracking branches, got (@vsn)\n".
          " Are we in the correct clone?" unless @vsn > 3;
        die "Cannot 'update' a bare repository" if $BARE;
        print "* Fetch\n";
        run(fetch => qw( git fetch -p -v ), $remote);
        run(fetch => qw( git fetch --tags -v ), $remote); # could prune local tags with -p, but doesn't seem friendly
        die "Found no remote tracking branches from $remote" unless @r_br;
        print "\n* Update local branches\n";
        update_local($remote, [ sort @l_br ], [ sort @r_br ]);
        print "\n* Restore checkout branch\n";
        run(checkout => qw( git checkout ), $br, '--'); # back where we started

    } else {
        $0 =~ s{.*/}{};
        die <<"HELP";
Syntax: $0 merge [ --force ]
        $0 update [ <remote> ]

Merge is probably best done centrally via a hook.
Let's see how it goes.

Update ensures all local branches exist and are up-to-date with the
specified remote.  Local changes are rebased forward.  Obsolete
branches are removed safely.

HELP
    }

    return 0;
}

sub run {
    my ($what, @cmd) = @_;
    system(@cmd);
    die "run: '$what' failed ".
      ($? == -1 ? $! : sprintf("0x%X", $?)).
        "\n  (@cmd)\n"
          if $?;
    print "ran $what => (@cmd)\n" if $DEBUG;
}

sub rev_parse {
    my ($ref) = @_;
    my $txt = qx( git rev-parse $ref );
    chomp $txt;
    die "Ref $ref looks invalid"
      unless $txt =~ m{\A[a-f0-9]{40}\z};
    return $txt;
}

sub pipe_to {
    my ($cmd, @txt) = @_;
    open my $fh, '|-', @$cmd
      or die "Failed to pipe to @$cmd: $!";
    print {$fh} join '', @txt
      or die "Failed to send to @$cmd: $!";
    close $fh
      or die sprintf("Failed after piping to @$cmd: !=%s ?=0x%X\n", $!, $?);
    return ();
}

sub non_merge_warn {
    my ($ref, $n) = @_;
    my @ci = qx( git log -n$n --first-parent --format='%h:%p:"%s" by %aN' $ref );
    chomp @ci;
    # Assumption: merge commits were made by this program, or equivalent.
    # Anything else is a misplaced commit and is about to be tromped.
    for (my $i=0; $i<@ci; $i++) {
        my ($h, $pp, $info) = split /:/, $ci[$i], 3;
        my @p = split / /, $pp;
        next if @p > 1; # skip merge
        warn sprintf("[w] %s%s (%s) is a non-merge commit %s - edit %s tromped\n",
                     $ref,
                     $i ? "~$i" : '',
                     $h, $info,
                     $i ? 'has been' : 'about to be');
    }
    return ();
}

sub make_merge {
    my (@br) = @_;

    # Build new commit
    my @tree; # mode SP sha1 TAB path
    my %ci; # key = branch, value = ciid
    foreach my $br (@br) {
        # Find out what we're merging
        $ci{$br} = my $ciid = rev_parse($br);

        # Collect what's inside
        my @obj = split /\x00/, qx( git ls-tree -z -r $ciid );
        foreach my $obj (@obj) {
            my ($mode, $sha1, $path) = $obj =~
              m{^(100644|120000) blob ([a-f0-9]{40})\t(.+)$};
            die "Refusing merge of object '$obj' from branch $br - ".
              "expected plain file or symlink" unless defined $path;
            die "Refusing merge of subdirectory in '$obj' from branch $br"
              if $path =~ m{/};

            if ($path =~ m{^\.?\#|(~|\.bak|\.swp)$}) {
                warn "[w] Omitted temporary file $obj from branch $br\n";
                next;
            }

            my $dir = ($br eq 'root' ? '' : "$br/");
            push @tree, sprintf("%s %s\t%s%s\x00", $mode, $sha1, $dir, $path);
        }
    }

    # Put new state into a new index
    local $ENV{GIT_INDEX_FILE} = "$GIT_DIR/server-config-merge.index";
    run(empty_index => qw( git rm -rfq --ignore-unmatch --cached . ));
    pipe_to([qw[ git update-index -z --index-info ]], @tree);

    # List branches causing diffs
    my @diff_fn = split /\x00/, qx( git diff --cached --name-only -z );
    my @diff_br = uniq sort map { m{^(\d+)/} ? $1 : 'root' } @diff_fn;
    warn "[i] Diffs seen in directories for (@diff_br)\n";
    my @lost_br = grep { ! $ci{$_} } @diff_br;
    die "Refusing merge because I lost branch(es) (@lost_br)" if @lost_br;
    die "Refusing merge - no diff" unless @diff_br;

    # Build list of merge parents
    push @RM_FILES, "$GIT_DIR/MERGE_HEAD", "$GIT_DIR/MERGE_MODE";
    write_file("$GIT_DIR/MERGE_HEAD", { atomic => 1 },
               join '', map {"$_\n"} @ci{@diff_br});
    write_file("$GIT_DIR/MERGE_MODE", { atomic => 1 }, 'no-ff'); # \n breaks it

    # Make the commit
    local $ENV{GIT_WORK_TREE};
    if ($BARE) {
        $ENV{GIT_WORK_TREE} = "$GIT_DIR/server-config-merge.tree";
        mkdir $ENV{GIT_WORK_TREE}; # must exist, but isn't used
    }
    run(commit => qw( git commit -q -m ), qq{Merged (@diff_br)\n});
}

sub apply_commit {
    # Apply commit to working copy,
    # outside the influence of local %ENV
    # Surely there's a better way?
    my $ci_new = rev_parse('HEAD');
    run(update_wc => qw( git reset -q --hard HEAD^ ));
    run(update_wc => qw( git merge --ff-only ), $ci_new);
}

sub update_local {
    my ($remote, $l_br, $r_br) = @_;

    # sets of local and remote branches to consider
    my %l_br; @l_br{@$l_br} = ();
    my %r_br; @r_br{@$r_br} = ();

    my @tag = qx( git tag -l );
    chomp @tag;
    my %tag; @tag{@tag} = ();

    foreach my $br (uniq sort (@$l_br, @$r_br)) {
        my $gone_tag = "rm/$br";
        if (exists $l_br{$br} && exists $r_br{$br}) {
            # update the local tracking branch
            print STDERR "** "; # prefix for git-checkout noise,
                                # which we keep to explain rebase actions
            run(checkout => qw( git checkout ), $br, '--');
            run(ff_rebase => qw( git rebase ), "$remote/$br");
            delete $l_br{$br};
            delete $r_br{$br};
        } elsif (exists $l_br{$br}) {
            # local branch has no remote
            if (exists $tag{$gone_tag}) {
                # remote thinks it's gone
                run(checkout => qw( git checkout -q ), $br, '--');
                run(decommissioned_version_ff => qw( git merge --ff ), $gone_tag);
                # if that fails, user has outstanding commits on a dead version
                run(decommissioned_version_rm => qw( git branch -D ), $br);
                delete $l_br{$br};
            } else {
                # user thinks it's new
                warn "[w] Skip local new branch '$br' (sorry)\n";
# Need to tell what the options are.  This could be a new merged
# branch or another version.  Versions should be made with $op='next'
            }
        } elsif (exists $r_br{$br}) {
            # new remote
            run(checkout => qw( git checkout -q -b ), $br, "$remote/$br", '--');
            # in the unlikely event of a version being reincarnated,
            # and because we don't "git fetch -p --tags"
            run(no_rm_tag => qw( git tag -d ), $gone_tag) if exists $tag{$gone_tag};
        } # else { this didn't happen }
    }
}


exit main();

END {
    unlink @RM_FILES; # ignore error
}
