#! /software/perl-5.12.2/bin/perl
#
# Hardwired #! to avoid influence from calling user's environment.
# Avoiding /usr/bin/perl for lack of File::Slurp.

use strict;
use warnings;

use List::MoreUtils 'uniq';
use File::Slurp qw( slurp write_file );
use Cwd 'getcwd';
use Try::Tiny;


=head1 NAME

server-config-op - operate on Otter Server config repository

=head1 SYNOPSIS

 server-config-op update
 # fetches from origin, then
 # rebases any local commits on each local tracking branch

 git checkout 66 --
 # edit files
 git commit -m 'fixed something'

 commitid=$( git rev-parse 66 )
 server-config-op pick $commitid 65

 git checkout root
 # edit files
 git commit -m 'fixed another thing'

 git checkout dev
 git pull
 # 'origin' server will have done the merge from branches (65, 66,
 # root) are merged in their subdirectories

=head1 DESCRIPTION

=over 4

=item server-config-op < update | up > [ <remote> ]

Fetch all the remote tracking branches (with prune option), and tags.
Then ensure all corresponding local branches exist, rebasing any local
commits.

Also fixes directory permission - should not be world readable - and
B<will install a post-commit hook> to run the C<lint> operation below.

The default remote is C<origin>.

Local branches which persist after the remote has been tagged and
removed are cleanly deleted after a C<git merge --ff-only>.  This
ensures no local commits are discarded, but (being an unlikely event)
the error is handled tersely and without cleaning up properly.

XXX: Newly created local branches are not handled.  This missing
feature, will be used monthly, workaround by branching on the remote.

See L<http://mediawiki.internal.sanger.ac.uk/index.php/Otter_Server_configuration#Getting_up-to-date>

=item server-config-op < cherry-pick | pick > <branch>* <commit>*

Given a list of branch names (which must exist already) and commits
(five or more hex digits), mixed any way,

=over 4

=item 1. For each branch (in the order given),

=item 2. For each commit (in the order given - last in list is applied last),

=item 3. Attempt to C<git cherry-pick> the commit onto the branch.

If something goes wrong, abort leaving you with the pieces to examine.

=item 4. Check out the original branch afterwards.

=back

Merge conflict and null pick are the most likely cause of failure.
When these happen, you are left to clear up and proceed with the rest
of your merges by hand; maybe file the transcript with your feature
request?

See L<http://mediawiki.internal.sanger.ac.uk/index.php/Otter_Server_configuration#Cherry_pick_to_other_versions>

=item new <version> [ <remote> ]

The version number should be one greater than the largest current
version number.  The new version is created by

=over 4

=item 1. Update, like C<server-config-op update>

=item 2. Tagging the branch point, because it is otherwise hard to
find later.

=item 3. Update designations.txt for new dev.

Currently manual, after C<server-config-op new> finishes.

=item 4. Push tag and new remote.

=item 5. Update again.

=back

The default remote is C<origin>.

If L<webpublish(1)> is still required, the caller must do it.

See L<http://mediawiki.internal.sanger.ac.uk/index.php/Otter_Server_configuration#New_version_branch>

=item lint

Check some of the files in the current directory.

The exit code may be

 0: no problems
 4: something might be wrong
 5: too late to lint dev or live

=back


=head2 To run in intcvs1 hook

The merge operation is performed with a hook on the central server, to
ensure everyone sees the same merge.  It is possible but not
recommended to make and push your own merge commit from this tool.

=over 4

=item server-config-op merge [ --force ]

Makes an octopus-like merge of multiple version branches into one
multi-directory tree by B<overwriting> the current tree with the
contents of the branch.

It does this for all existing numbered branches, and the one called
C<root>.

It works for both bare repositories and working copy clones.  However,
in a working copy using this without up-to-date local version branches
will cause confusion (resulting merges could be fast-forwards, but
still stale).  For this reason it only operates on working copies when
forced.

It works with a detached HEAD, but may not produce useful results.

=back



=head1 LOCAL GIT-HOOKS

This script installs itself as a post-commit hook.
Failure do not prevent commits, but will make noise.


=head1 CENTRAL GIT-HOOKS

This script works in conjunction with I<hooks> on the central server,
which trigger actions when you push to it and come from
F<git-hooks/server-config/> in this repository.

=over 4

=item * Pushing to C</^(\d+|root)$/> causes a merge to C<HEAD>

This is normally the C<dev> branch.  The plan is that you assemble
your commits on each version branch, push them, then fetch the merge
result.

=item * Pushes to C<live> must have been seen on C<dev>.

This should ensure that only valid merges are sent to live servers,
but can it be circumvented by pushing a non-merge to C<dev> first.

=item * Pushing a new branch is forbidden

This is a feature hole!  The 'update' op has a stub to warn about it.

=item * Pushes which delete a branch are forbidden

This is a feature hole in this script's merge operation.  The plan is
to

 # detect empty branch during merge - files are thus removed from dev
 git tag rm/$vsn $vsn
 git branch -D $vsn
 
 # developers' next "server-config-op update" has "git fetch -p" to
 # clean up the dead branches

It's not clearly useful to code this up now, nor are the clean
operation or reversibility of the protocol tested.

There was code in F<saveconf/otter_data/vsn_merge.pl> for this.

=back

Other things which shouldn't happen or are ill-advised,

=over 4

=item * Tag overwrites must be done via delete.

This should not be required, but it's not locked down hard.

=item * Committing or pushing to dev

The merge to HEAD is done by replacing the entire tree with one
assembled from the constituent branches.  Other changes from previous
commits are lost.

For this reason, warnings are generated for non-merge commits on HEAD
before they are covered up by the merge.

=item * Pushing to version branches and dev.

For the special case of pushing both dev and a version branch
together, the dev commit will be covered up immediately unless the
merge is a null diff.  Don't do that.

=back


=head1 CAVEATS & QUESTIONS

The names root, dev and live are hardwired in various places.

=head2 Do version branches need marker files?

It may be useful to place a marker file (e.g. C<touch 65>) on each
branch, to avoid confusion if the wires are crossed.

=head2 How to create the next version?

Plan A:

 git checkout -b 69 68
 git reset --hard HEAD
 git commit --allow-empty 'Start branch 69'
 git push
 # some kind of sanity checking?

Plan B:

 ssh intcvs1
 cd /repos/mumble.git
 git branch 69 68

=head2 How to get updates onto webservers?

Not yet implemented - discussion required, but

 cd /nfs/...mumble..._docs.../data/otter
 git pull --rebase
 
 # and if necessary
 git checkout live
 webpublish -r .
 # That queues it.  Do we need to wait until it actually happens?
 git checkout dev

should do it, after setup.

=head2 Automated onward-push to Otter Server instances?

Perfectly feasible for those who have access.

We may need to configure ssh keys to ensure all pushers to the config
can also pass it on to the relevant servers.  This would mean assuming
control of access.

=head1 AUTHOR

mca@sanger.ac.uk

=cut


our $DEBUG = 0;
our @RM_FILES; # to unlink in END
our ($GIT_DIR, $BARE);
our $TMPFILE_RE = qr{^\.?\#|(~|\.bak|\.swp)$};

sub main {
    $| = 1;
    umask 02;
    set_globals();

    my $op = shift @ARGV || '(nil)';

    # Sanity check repo
    my ($br, @l_br) = branch_info();

    # Do stuff
    if ($op eq 'merge') {
        my @vsn = sort map { m{^(\d+|root)$} ? ($1) : () } @l_br;
        sane_repo(local => @vsn);

        die "Abort: merge on non-central repo is risky"
          unless $BARE || (@ARGV && '--force' eq shift @ARGV);
        die "Abort: expect to merge to a non-version branch, but we are on '$br'\n"
          if !defined $br || $br =~ m{^(\d+|root)$};
        non_merge_warn(HEAD => 10);
        my $changed = make_merge(@vsn);
        apply_commit() if !$BARE && $changed;

    } elsif ($op =~ /^up(date)?$/) {
        my $remote = @ARGV ? shift @ARGV : 'origin';
        my @r_br = pipe_from(qw( git branch -r ));
        @r_br = map { m{^\*?\s+$remote/(\S+)$} ? ($1) : () } @r_br;

        my @vsn = sort map { m{^(\d+|root)$} ? ($1) : () } @r_br;
        die "Cannot 'update' a bare repository" if $BARE;
        sane_repo("remote tracking ($remote)" => @vsn);

        print "* Fetch\n";
        fix_perms();
        run(fetch => qw( git fetch -p ), $remote);
        run(fetch => qw( git fetch --tags ), $remote); # could prune local tags with -p, but doesn't seem friendly
        die "Found no remote tracking branches from $remote" unless @r_br;
        print "\n* Update local branches\n";
        my @del = update_local($remote, [ sort @l_br ], [ sort @r_br ]);
        if (grep { $_ eq $br } @del) {
            print "\n* NB. $br was cleanly deleted\n";
            $br = 'root';
        }
        hooks_install() unless $BARE;
        restore_checkout($br);

    } elsif ($op =~ /^(cherry-)?pick$/) {
        die "Cannot '$op' in a bare repository" if $BARE;
        my @vsn = sort map { m{^(\d+|root)$} ? ($1) : () } @l_br;
        sane_repo(local => @vsn);
        cherry_pick(\@l_br, @ARGV);
        restore_checkout($br);

    } elsif ($op eq 'new') {
        die "Cannot '$op' in a bare repository" if $BARE;
        my @vsn = sort map { m{^(\d+|root)$} ? ($1) : () } @l_br;
        sane_repo(local => @vsn);
        push_new(@ARGV);

    } elsif ($op eq 'lint') {
        die "Cannot '$op' in a bare repository" if $BARE;
        return do_lint($br);

    } else {
        syntax_msg();
    }

    return 0; # early return on lint
}


sub set_globals {
    my $pwd = getcwd();
    if (-d '.git') {
        $GIT_DIR = "$pwd/.git";
        $BARE = 0;
    } elsif ($pwd =~ m{\.git$} && -f 'HEAD') {
        $GIT_DIR = $pwd;
        $BARE = 1;
    } else {
        die "Must be at top of clone - I am in $pwd";
    }
    return ();
}

sub branch_info { # Return ($checkout_branch, @local_branches)
    my @l_br = pipe_from(qw( git branch ));
    my ($br) = (join '', @l_br) =~ m{^\*\s*(.+)$}m;
    @l_br = map { m{^\*?\s+(\S+)$} ? ($1) : () } @l_br;

    return ($br, @l_br);
}


sub sane_repo {
    my ($l_r, @vsn) = @_;

    die "init fail?" unless defined $BARE;
    rev_parse('HEAD'); # ensure we have a valid HEAD
    unless ($BARE) {
        try {
            run(is_clean => qw( git diff --quiet --exit-code --cached ));
            run(is_clean => qw( git diff --quiet --exit-code ));
        } catch {
            my $err = $_;
            warn "Your working copy has uncommitted changes, according to\n$_\n";
            run(status => qw( git status ));
            die "\n\n\tMade no changes, to avoid losing your work-in-progress.\n\n\tPlease commit or reset, then try again.\n\n"
        };
    }

    my $more =
      ($l_r eq 'local'
       ? " Would '$0 update' give me the local branches?"
       : ' Are we pulling from the correct remote?');

    die "Expected some numbered Otter Data version $l_r branches, got (@vsn)\n".
      " Are we in the correct clone?\n$more" if @vsn < 4;

    return 1;
}

sub syntax_msg {
    $0 =~ s{.*/}{};
    die <<"HELP";
Syntax: $0 update [ <remote> ]
        $0 pick <commitid>+  <branch>+
        $0 new <next-version> [ <remote> ]

For details, see
  perldoc $0

Update ensures all local branches exist and are up-to-date with the
specified remote.  Local changes are rebased forward.  Obsolete
branches are removed safely.

Pick will "git cherry-pick -x" each of the given commitids, in order,
onto all of the given numeric branches in turn.

This script also implements a merge-like operation.  This is done
centrally via a hook and not intended for use in working copies.

HELP
}

sub restore_checkout {
    my ($br) = @_;
    print "\n* Restore checkout branch\n";
    run(checkout => qw( git checkout ), $br, '--'); # back where we started
    return;
}


sub run {
    my ($what, @cmd) = @_;
    system(@cmd);
    die "run: '$what' failed ".
      ($? == -1 ? $! : sprintf("0x%X", $?)).
        "\n  (@cmd)\n"
          if $?;
    print "ran $what => (@cmd)\n" if $DEBUG;
    return ();
}

sub pipe_to {
    my ($cmd, @txt) = @_;
    open my $fh, '|-', @$cmd
      or die "Failed to pipe to @$cmd: $!";
    print {$fh} join '', @txt
      or die "Failed to send to @$cmd: $!";
    close $fh
      or die sprintf("Failed after piping to @$cmd: !=%s ?=0x%X\n", $!, $?);
    return ();
}

sub pipe_from {
    my (@cmd) = @_;
    open my $fh, '-|', @cmd
      or die "Failed to pipe from @cmd: $!";
    my @catch;
    @catch = (wantarray ? <$fh> : scalar <$fh>);
    $catch[0] = '' unless defined $catch[0]; # for empty & scalar
    if (!close $fh) {
        my $msg;
        $msg = ($!) ? "Failed closing pipe from @cmd: $!"
          : sprintf('[d] Pipe from %s failed: ?=0x%X', "@cmd", $?);
        warn "$msg\n"; # previously we used qx()
    }
    return wantarray ? @catch : $catch[0];
}

sub rev_parse {
    my ($ref) = @_;
    my $txt = pipe_from(qw( git rev-parse ), $ref);
    chomp $txt;
    die "Ref $ref looks invalid"
      unless $txt =~ m{\A[a-f0-9]{40}\z};
    return $txt;
}

sub non_merge_warn {
    my ($ref, $n) = @_;
    my @ci = pipe_from(qw( git log --first-parent ), q(--format=%h:%p:"%s" by %aN), "-n$n", $ref);
    chomp @ci;
    # Assumption: merge commits were made by this program, or equivalent.
    # Anything else is a misplaced commit and is about to be tromped.
    for (my $i=0; $i<@ci; $i++) {
        my ($h, $pp, $info) = split /:/, $ci[$i], 3;
        my @p = split / /, $pp;
        next if @p > 1; # skip merge
        warn sprintf("[w] %s%s (%s) is a non-merge commit %s - edit %s tromped\n",
                     $ref,
                     $i ? "~$i" : '',
                     $h, $info,
                     $i ? 'has been' : 'about to be');
    }
    return ();
}

sub make_merge {
    my (@br) = @_;

    # Build new commit
    my @tree; # mode SP sha1 TAB path
    my %ci; # key = branch, value = ciid
    foreach my $br (@br) {
        # Find out what we're merging
        $ci{$br} = my $ciid = rev_parse($br);

        # Collect what's inside
        my @obj = split /\x00/, pipe_from(qw( git ls-tree -z -r ), $ciid);
        foreach my $obj (@obj) {
            my ($mode, $sha1, $path) = $obj =~
              m{^(100644|120000) blob ([a-f0-9]{40})\t(.+)$};
            die "Refusing merge of object '$obj' from branch $br - ".
              "expected plain file or symlink" unless defined $path;
            die "Refusing merge of subdirectory in '$obj' from branch $br"
              if $path =~ m{/};

            if ($path =~ $TMPFILE_RE) {
                warn "[w] Omitted temporary file $obj from branch $br\n";
                next;
            }

            my $dir = ($br eq 'root' ? '' : "$br/");
            push @tree, sprintf("%s %s\t%s%s\x00", $mode, $sha1, $dir, $path);
        }
    }

    # Put new state into a new index
    local $ENV{GIT_INDEX_FILE} = "$GIT_DIR/server-config-op.index";
    run(empty_index => qw( git rm -rfq --ignore-unmatch --cached . ));
    pipe_to([qw[ git update-index -z --index-info ]], @tree);

    # List branches causing diffs
    my @diff_fn = split /\x00/,
      pipe_from(qw( git diff --cached --name-only -z )); # non-zero exit OK
    my @diff_br = uniq sort map { m{^(\d+)/} ? $1 : 'root' } @diff_fn;
    warn sprintf("[i] Diffs seen in directories for (%s)%s\n",
                 "@diff_br", (@diff_br ? '' : ' - nothing to do'));
    my @lost_br = grep { ! $ci{$_} } @diff_br;
    die "Refusing merge because I lost branch(es) (@lost_br)" if @lost_br;

    if (@diff_br) {
        # Build list of merge parents
        push @RM_FILES, "$GIT_DIR/MERGE_HEAD", "$GIT_DIR/MERGE_MODE";
        write_file("$GIT_DIR/MERGE_HEAD", { atomic => 1 },
                   join '', map {"$_\n"} @ci{@diff_br});
        write_file("$GIT_DIR/MERGE_MODE", { atomic => 1 }, 'no-ff'); # \n breaks it

        # Make the commit
        local $ENV{GIT_WORK_TREE} = undef;
        if ($BARE) {
            $ENV{GIT_WORK_TREE} = "$GIT_DIR/server-config-op.tree";
            mkdir $ENV{GIT_WORK_TREE}; # must exist, but isn't used
        }
        run(commit => qw( git commit -m ), qq{Merged (@diff_br)\n});
        my $CEM = "$GIT_DIR/COMMIT_EDITMSG";
        unlink $CEM # tidy up, to avoid permission problems next time
          or warn "unlink $CEM failed: $!";

        return 1;

    } else {
        # nothing to do
        return 0;
    }
}

sub apply_commit {
    # Apply commit to working copy,
    # outside the influence of local %ENV
    # Surely there's a better way?
    my $ci_new = rev_parse('HEAD');
    run(update_wc => qw( git reset -q --hard HEAD^ ));
    run(update_wc => qw( git merge --ff-only ), $ci_new);
    return ();
}


sub fix_perms {
    die "We don't (yet) fix_perms on bare repo" if $BARE;
    my ($dir) = $GIT_DIR =~ m{^(.*)/\.git$}
      or die "Can't get toplevel from $GIT_DIR";

    ## no critic (ValuesAndExpressions::ProhibitLeadingZeros) here be octal perms
    my $stat = (stat($dir))[2] & 07777;
    my $want = $stat & 07770; # chmod o-rwx
    if ($stat != $want) {
        printf "** chmod 0%03o %s (o-rwx)\n", $want, $dir;
        chmod $want, $dir
          or die "Failed: $!";
    }
    return;
}

sub hooks_install {
    my $fn = '.git/hooks/post-commit';
    print "\n* Install $fn\n";
    my $want = <<'SHELL';
#!/bin/sh
#   Installed by server-config-op &hooks_install
#   Changes will be overwritten!

server-config-op lint
retcode=$?

if [ $retcode = 5 ]; then
    printf "\n *\n * Direct commit to dev or live is probably a bad idea\n *\n\n" >&2
fi
SHELL
    my $old = -f $fn ? slurp($fn) : "($fn is absent)";
    if ($old eq $want) {
        print "no-op\n";
    } else {
        write_file("$fn.new", { atomic => 1 }, $want);
        chmod 0755, "$fn.new";
        system("diff", "-u", $fn, "$fn.new");
        rename("$fn.new", $fn) or die "Failed to install $fn: $!";
        print "done\n";
    }
    return;
}


sub update_local {
    my ($remote, $l_br, $r_br) = @_;

    # sets of local and remote branches to consider
    my %l_br; @l_br{@$l_br} = ();
    my %r_br; @r_br{@$r_br} = ();

    my @tag = pipe_from(qw( git tag -l ));
    chomp @tag;
    my %tag; @tag{@tag} = ();

    foreach my $br (uniq sort (@$l_br, @$r_br)) {
        my $gone_tag = "rm/$br";
        if (exists $r_br{$br} && exists $tag{$gone_tag}) {
            die "Confused by presence of remote branch and deletion tag for $br.\n";
            # bug in whatever made the tag, or failed to remove the remote branch?
            # version being reincarnated?  (an unlikely event)
        } elsif (exists $l_br{$br} && exists $r_br{$br}) {
            # update the local tracking branch
            print STDERR "** "; # prefix for git-checkout noise,
                                # which we keep to explain rebase actions
            run(checkout => qw( git checkout ), $br, '--');
            run(ff_rebase => qw( git rebase ), "$remote/$br");
            delete $l_br{$br};
            delete $r_br{$br};
        } elsif (exists $l_br{$br}) {
            # local branch has no remote
            if (exists $tag{$gone_tag}) {
                # remote thinks it's gone
                print "** Tag $gone_tag: $br is gone\n";
                die "Did not expect 'root' to disappear" if $br eq 'root';
                run(checkout => qw( git checkout -q ), $br, '--');
                run(decommissioned_version_ff => qw( git merge --ff-only ), $gone_tag);
                # if that fails, user has outstanding commits on a dead version
                run(decommissioned_co_other => qw ( git checkout -q root -- ));
                print " >> OK - you had no local commits awaiting push\n";
                run(decommissioned_version_rm => qw( git branch -D ), $br);
                delete $l_br{$br};
            } else {
                # user thinks it's new
                warn "[w] Skip local new branch '$br' (sorry)\n"; # XXX
# Need to tell what the options are.  This could be a new merged
# branch or another version.  Versions should be made with $op='next'
            }
        } elsif (exists $r_br{$br}) {
            # new remote - make local tracking branch
            print "** "; # prefix for git-checkout noise
            run(checkout => qw( git checkout -q -t ), "$remote/$br", '--');
        } # else { this didn't happen }
    }

    # tell of absent branches
    return map { m{^rm/(\d+)$} ? ($1) : () } @tag;
}


sub cherry_pick {
    my ($l_brs, @arg) = @_;
    my %l_br;
    @l_br{ @$l_brs } = (1) x @$l_brs;

    my @ci = grep { m{^[0-9a-f]{5,40}$} } @arg;
    my @br = grep { $l_br{$_} } @arg;
    my @bad = grep { not( $l_br{$_} xor m{^[0-9a-f]{5,40}$} ) } @arg;
    if (@bad) {
        my @ambig = grep { $l_br{$_} } @bad;
        my @none = grep { !$l_br{$_} } @bad;
        die "Will not cherry-pick with ambiguous (@ambig) or bad (@none) arguments\n";
    }
    die "Cannot cherry-pick onto @br - no commits given\n" unless @ci;
    die "Cannot cherry-pick commits @ci - no branches given\n" unless @br;

    print "* Cherry Pick\n";
    foreach my $br (@br) {
        print "** Onto branch $br\n";
        run(checkout => qw( git checkout -q ), $br, '--');
        foreach my $ci (@ci) {
            print "*** $ci\n";
            run(pick => qw( git cherry-pick -x ), $ci);
        }
    }

    return;
}


sub push_new {
    my ($new, $remote) = @_;
    $remote = 'origin' unless defined $remote;
    die "Expected to be given one new version number.  Requested is '$new' on remote '$remote'\n"
      unless (1 == @_ || 2 == @_) && $new =~ m{^\d+$};

    print "* 1.  Update from $remote (calling self)\n";
    run(update1 => qw( server-config-op update ), $remote);

    # Figure out latest version now, after update
    my (undef, @l_br) = branch_info();
    my ($last) = sort { $b <=> $a } map { m{^(\d+)$} ? ($1) : () } @l_br;
    die "Expected that the new version would be N+1.  Latest (after update) = $last, requested is '$new' on '$remote'\n"
      unless $last + 1 == $new;

    print "* 2.  Tag\n";
    run(tag2 => qw( git tag -a -m ), "Branch $new came off $last here", "new/$new", $last);

    print "* 3.  Update designations.txt : dev = $new
   XXX: This is not automated!\n\n"; sleep 3;

    print "* 4.  Push to $remote\n";
    run(push4 => qw( git push ), $remote, "new/$new", "$last:refs/heads/$new");

    print "* 5.  Update again\n";
    run(update5 => qw( server-config-op update ), $remote);

    return;
}


sub do_lint {
    my ($br) = @_;
    my (@check, %bad);

    if ($br eq 'dev' || $br eq 'live') {
        print " > Lint: not running on $br\n";
        return 5;
    } elsif ($br eq 'root') {
        print " > Lint: no checks yet, for $br\n";
        # Delegate to webvm or latest e-o ?
        return 0;
    }

    # Find & load the right code
    my $find_major =
      ($br < 88 ? 88 # lint code not available before that
       : $br);
    my $eo =
#      "$ENV{HOME}/gitwk-anacode/ensembl-otter/modules";
      "/software/anacode/otter/otter_rel$find_major/ensembl-otter/modules"; # XXX: Linux-centric!  Should call some team_tools code to find it?
    try {
        require lib;
        lib->import($eo);

        require Bio::Otter::Version;
        if ($br ne (my $major = Bio::Otter::Version->version)) {
            $bad{version} = [ "code $major from $INC{'Bio/Otter/Version.pm'}",
                              "data $br" ];
        }
    } catch {
        my $err = $_;
        $err =~ s{ \(\@INC contains: .*}{}; # too long
        chomp $err;
        $bad{code_load} = [ "Lint failed: $err", "Tried $eo" ];
    };

    if (-f 'otter_config') {
        try {
            require Bio::Otter::Utils::Config::Lint;
            my $lint = Bio::Otter::Utils::Config::Lint->new('otter_config');
            push @check, 'otter_config';
            my @fail = $lint->check;
            $bad{"$br/otter_config"} = \@fail if @fail;
        } catch {
            my $err = $_;
            $err =~ s{ \(\@INC contains: .*}{}; # too long
            chomp $err;
            $bad{"$br/otter_config"} = [ "Lint failed: $err" ];
        };
    }

    printf(" > Lint:%s, checked %s\n",
           (keys %bad ? 'FAIL' : 'ok'),
           join ' ', @check)
      if @check;
    printf("\n [%s]\n\t%s\n", $_, join "\n\t", @{ $bad{$_} })
      foreach sort keys %bad;
    print("\n  This may not be a real problem, but\n",
          "  you should check before pushing.\n\n")
      if keys %bad;

    return keys %bad ? 4 : 0;
}


exit main();

END {
    unlink @RM_FILES; # ignore error
}
