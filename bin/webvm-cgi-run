#! /usr/bin/perl
use strict;
use warnings;


=head1 NAME

webvm-cgi-run - a wrapper to run locally one CGI script

=head1 SYNOPSIS

 webvm-cgi-run [ -D | -C ] [ -W <webdir> ] [ -q <query> | -Q ] <cgi-script>

 cd ~mca/_httpd2   # my webdir
 webvm-cgi-run -D -q dataset=human cgi-bin/otter/76/get_meta
 webvm-cgi-run -D -Q              'cgi-bin/otter/76/get_meta?dataset=human'

=head1 DESCRIPTION

This script is a wrapper that can run locally the Perl (only!)
C<cgi-script> within the context of the webvm.git checkout at
C<webdir>.  Both paths are relative to $PWD, which is not changed.

=head2 History

Formerly known as F<team_tools.git/otterlace/server/bin/otterlace_cgi_wrap>
and using a different workaround to run with C<perl -T>.

=head2 Setup

This wrapper script requires that the CGI scripts be in-situ in a
webvm.git checkout.  It doesn't have to be running as a webserver, but
these components are necessary,

=over 4

=item * F<lib/boostrap/> from webvm.git

Provided directly by this script to C<perl -I>.

=item * F<app/webvm-deps/> from webvm-deps.git

Unless L<Otter::Paths> is going to find everything it needs elsewhere.

=item * F<data/otter/> from server-config.git

To satisfy L<Bio::Otter::Server::Config>.

=back

unless we add to each piece of code some other way to supply the
relevant files.

=head2 Notes on operation

=over 4

=item * Emulates a GET request

Support for POST is by passing C<$REQUEST_METHOD='POST'>.  An option
to set this and read from a file might be useful.

=item * Environment

It doesn't reconstruct the exact environment given to a script, but it
should be close enough for debugging.

=item * Perl is taken from C<$PATH>.

This is different to the (somewhat complex and messy) choice used
inside Apache.  (Wrapper does not taint-check.)

=item * Libraries should be set up by the CGI script,

but we also give C< -I .../bootstrap > directly for the ones that
don't use C<$OTTER_PERL_INC> as F<ensembl-otter/scripts/apache/*> do.

Anything which invokes L<SangerPaths> should work.

=item * Extra ARGV is passed along just in case.

=back


=head1 OPTIONS

=over 4

=item --stubs | -D

Provide the Perl script with C< -I lib/devstub/ > from C<webvm.git>.
This is enough to get most Otter Server CGI scripts working with
legible output, but authentication will be bogus.

The mechanism of action is (at current writing 2013-10) providing a
fake L<SangerWeb>,

=over 4

=item * this gives the no-checks authentication your username

=item * it also loads L<Otter::EnvFix>, which in turn

=over 4

=item * sets C<$HTTP_CLIENTREALM>

=item * enables control of error wrapping

...by respecting C<$OTTERLACE_ERROR_WRAPPING_ENABLED> , but there is
currently no default for this.

=item * disables compression in L<Bio::Otter::ServerScriptSupport>

=item * (provides a default bogus authentication name, which will not be in users.txt)

...we don't need that because this script passes your username in an
environment variable.

=back

=back

=item --query | -q <query_string>

Pass the text as the GET query string.

=item --strip-query | -Q

With this option, the query string is not given separately from the
script filename but stripped off the end of C<cgi-script> at the C<?>.

=item --otter-cookie | -C

Provide otterlace authentication cookie from F<~/.otter/> and pass it
to C<cgi-script>.  This is done quite indiscriminately - ignoring
hostnames, paths, expiry times etc..

Note that such cookies are ignored when C<--stubs> is enabled.

=item --keep-env | -E

Do not purge C<%ENV> before invoking the script.

By default, most keys are removed - exceptions listed in the source.

=item --webdir | -W <webdir>

You can specify the directory for the F<webvm.git> checkout
explicitly, but it is normally discovered - currently by taking the
parent of the F<cgi-bin> directory from the script.

=back


=head1 AUTHOR

mca@sanger.ac.uk

=cut

use Getopt::Long;
use Pod::Usage;
use Cwd 'abs_path';
use File::Spec;


my %opt;
sub main {
    Getopt::Long::Configure(qw( bundling require_order ));
    my @opt = qw( help|h stubs|D otter_cookie|otter-cookie|C
                  query|q=s strip_query|strip-query|Q
                  keep_env|keep-env|E webdir|W=s );
    GetOptions(\%opt, @opt) or $opt{help} = 1;
    $opt{help} = 1 unless @ARGV;

    pod2usage(-exitstatus => 0, -verbose => 2) if $opt{help};

    # Find script
    my $cgi_script = shift @ARGV;
    if ($opt{strip_query}) {
        die "Conflicting --query && --strip-query given" if exists $opt{query};
        $opt{query} = $1 if $cgi_script =~ s{\?(.*)$}{};
    }
    die "cgi_script=$cgi_script: not an executable file"
      unless -f $cgi_script && -x _;
    $cgi_script = File::Spec->rel2abs($cgi_script);

    # Find webdir.  Otter::Paths needs it absolute, to locate libs
    my $webdir = delete $opt{webdir};
    $cgi_script =~ m{\A(.*)(/cgi-bin/.*)$}
      or die "Cannot find .../cgi-bin/... in $cgi_script to cook up the URL";
    my $cgi_url = $2;
    $webdir = $1 # as in old team_tools/otterlace/server/perl/SangerPaths.pm
      if !defined $webdir;
    $webdir = abs_path($webdir);

    my @cgi_INC = ("$webdir/lib/bootstrap");
    die "webdir=$webdir: doesn't look like a webvm.git checkout"
      unless -d $webdir && -f "$cgi_INC[0]/Otter/Paths.pm";

    # Purge existing %ENV
    my %cookie;
    my @ENV_keep =
      ('OTTER_PERL_INC',   # scripts use it
       'OTTER_PERL_EXE',   # for Otter::PerlVersion

       'HTTP_CLIENTREALM', # so you can pretend to be the zxtm
       'OTTERLACE_ERROR_WRAPPING_ENABLED', # honoured by Otter::EnvFix

       'PATH',             # likely to be ignored by taint-checking scripts
       'http_proxy', # essential for HTTP out
       'no_proxy',   #

       'REQUEST_METHOD', # CGI

       'BOGUS_AUTH_USERNAME', # Otter::EnvFix & the bogus SangerWeb
       # (but it is currently overwritten)
      );

    %cookie = get_cookies() if $opt{otter_cookie}; # before losing $HOME

    %ENV = map { exists $ENV{$_} ? ( $_ => $ENV{$_} ) : () } @ENV_keep
      unless $opt{keep_env};


    if ($opt{stubs}) {
        $ENV{APACHE_DEVEL} = 1;
        $ENV{BOGUS_AUTH_USERNAME} ||= (getpwuid($<))[0];
        unshift @cgi_INC, "$webdir/lib/devstub";
    }

    # Bio::Otter::Server::Config needs it, to locate data/otter/
    $ENV{DOCUMENT_ROOT} = "$webdir/htdocs";

    $ENV{HTTP_COOKIE} = join '; ',
      map {"$_=$cookie{$_}"} sort keys %cookie
        if keys %cookie;

    # Incomplete CGI-like setup, please extend as needed
    $ENV{SCRIPT_FILENAME} = $cgi_script;
    $ENV{SCRIPT_NAME} = $ENV{SCRIPT_URL} = $cgi_url;
    $ENV{GATEWAY_INTERFACE} = 'CGI/bogus'; # 'CGI/1.1'
    $ENV{REQUEST_METHOD} = 'GET' unless defined $ENV{REQUEST_METHOD};

    $ENV{LANG} = 'C' unless exists $ENV{LANG};
    # as in APACHECTL wrapper, which wants it to be well-defined

    if ($opt{query}) {
        $ENV{QUERY_STRING} = $opt{query};
        $ENV{REQUEST_URI} = join '?', @ENV{qw{ SCRIPT_URL QUERY_STRING }};
    } else {
        $ENV{REQUEST_URI} = $ENV{SCRIPT_URL};
    }

    # With this, we probably don't need to use OTTER_PERL_EXE to cause
    # self-wrap in Otter::PerlVersion
    my @cmd = (qw( perl -T ), (map {( -I => $_ )} @cgi_INC),
               $cgi_script, @ARGV);
    exec @cmd;
    die "exec @cmd: failed $!";
}

sub get_cookies {
    my $cookiefn = "$ENV{HOME}/.otter/ns_cookie_jar";
    my @out;
    if (open my $fh, $cookiefn) {
        while (<$fh>) {
            next if /^\s*(#|$)/;
            my @f = split /\s+/;
            push @out, @f[5, 6];
        }
    } else {
        warn "read $cookiefn failed: $!";
    }
    return @out;
}


main();
