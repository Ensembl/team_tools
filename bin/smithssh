#! /usr/bin/env perl

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;

use Try::Tiny;
use File::Slurp 'read_dir';

use JSON 'encode_json'; # should use JSON::XS automatically
use MIME::Base64 'encode_base64';


=head1 NAME

smithssh - wrapper for "find the right key; ssh to webserver"

=head1 SYNTAX

  smithssh <host> <command> [ <args> ]*
  smithssh --ident [ <host> [ <command> ... ] ]
  smithssh --path <type> <host>

=head2 Examples

  smithssh -u web-otterdev-01 restart
  smithssh    web-otterdev-01 utilities/restart

  smithssh web-otterstaging-01 ls -l /www/www-live/

  rem_tmp=$( smithssh -p tmp web-otterdev-01 )
  rsync -ai -e smithssh web-otterdev-01:$rem_tmp /tmp/foo

  scp -i $( smithssh -i web-otterdev-01 scp ) -rp \
               www-core@web-otterdev-01:$rem_tmp /tmp/foo
  # Ugh.  Let me know if you want "smithscp".

=head1 DESCRIPTION

The user account running the web server on the virtual machines does
not accept password logins.  Instead it requires use of ssh key pairs,
with a restricted command.

=head2 Prerequisites

You need a host to connect to, e.g. C<web-otterdev-01>.

In the normal case of the remote user being C<www-core> you need ssh
keypairs written into F<~/.ssh/pagesmith/> by the web team's script.

=head2 Functions of this script

=over 4

=item * Guessing the correct key to use

There may be up to three keys (by usage patterns seen at time of
writing).  Having the script guess which to use saves typing.

=item * Guessing the remote user

The options are "yourself" for the sandbox, or "www-core" for dev,
staging and live hosts.  This is handled implicitly.

=item * Encoding the command

The remote C<server-actions.pl> command requires that its arguments be
UTF8, JSON and Base64 encoded.

=item * Supplying command abbreviations

The remote C<server-actions.pl> command requires that subcommands be
given with an explicit path which can be inferred from the other
parameters.

=item * Knowing the remote directory name

So code operating on remote directories can avoid magic strings.

=back

Logic for these functions is provided by inspection of the remote
code.

See also L<webhosts(1)>.


=head1 OPTIONS

These are all optional flags.

=over 4

=item --utilities | -u

Prepend C< <command> > with the remainder of the name of the
F<utilities/> directory, calculated for the remote host and user.

This is implied if the command starts with C<utilities/>.

=item --dryrun | -n

Echo the resulting L<ssh(1)> command instead of calling C<exec>.

=item --ident | -i

Don't run L<ssh(1)> but instead print the filename of the key.

=item --path | -p <type>

Don't run L<ssh(1)> but instead print the filename on the remote, of
the given type.

Valid types are C<tmp> or C<webdir>.

=item --keyfile | -K <filename>

Give the filename of the key for C<ssh -i $filename> .  There are
easier ways to get the right key, you probably don't need it.

This may be a relative filename, we do not C<chdir>.

=item --keyname | -k <name>

Give the leafname the key for the keyfile.  There are easier ways to
get the right key, you probably don't need it.

The directory is inferred from the expected remote user.

=back


=head1 DIAGNOSTICS

Error C<'Requires command user and parameters to be set\n'> (sic)
comes from F</www/utilities/server-actions.pl>

Error C<'restricted-scp: This key can only be used to scp files to/from this server (and to run ls)'>
comes from /www/utilities/restricted-scp


=head1 SEE ALSO

 http://apps.sanger.ac.uk/docs/admin/svn/
 http://apps.sanger.ac.uk/docs/admin/publish/
 http://mediawiki.internal.sanger.ac.uk/index.php/Anacode:_Web_VMs#Access_control_.26_users


=head1 AUTHOR

mca@sanger.ac.uk

=cut


# Hints for auto keyname guessing are derived from study of the
# scripts invoked on the remote
#
my %CMD2KEYN = #  keyname => regexp_for_command
  (# server-actions.pl runs tools within the WEBDIR
   'restart-server' => qr{^/www/},

   # restricted-scp does various file transfer
   'scp-ssh' => qr{^(scp|rsync|ls|rm|mkdir|rmdir|grep)$},

   # used direct?  I don't have it
   'svn-ssh' => qr{^(svn)$},
  );


my %opt;
sub main {
    ensure_uniC();

    ### Option processing
    #
    my @error;
    try {
        do_getopt()
    } catch {
        push @error, $_;
    };

    ### Where we're going, and as which user
    #
    my ($desthost, $cmd, @arg) = @ARGV;
    if (!defined $desthost || $desthost eq '') {
        $desthost = 'web-otterdev--mumbly-unspecified'; # for &hostinfo
        push @error, 'Destination host argument is required'
          unless $opt{ident};
    }
    unless ($opt{ident} or $opt{path} or defined $cmd) {
        push @error, 'Command and/or --ident are required';
    }
    my ($dlu, $remuser) = try { hostinfo($desthost) }
      catch { push @error, "hostinfo($desthost): $_"; qw() };

    ### What we're doing
    #
    $opt{utilities} = 1 if defined $cmd && $cmd =~ m{^utilities/};
    if ($opt{utilities}) {
        $cmd =~ s{^(utilities/|)([^/]+)$}{/www/$dlu/utilities/$2}
          or push @error, "Failed to supply pathname prefix for command '$cmd'";
    }
    if ($opt{path}) {
        push @error, "--path $opt{path}: Expected 'tmp' or 'webdir'"
          unless $opt{path} =~ m{^(tmp|webdir)$};
        $opt{keyname} = 'scp-ssh' # irrelevant for this action
          unless $opt{keyname} || $opt{keyfile};
    }

    ### Find key
    #
    my $keysdir = keysdir($remuser);
    my ($key, $keysrc);
    if (exists $opt{keyfile}) {
        $key = delete $opt{keyfile};
        $keysrc = '--keyfile';
    } else {
        my $keyname = delete $opt{keyname};
        if (defined $keyname) {
            $keysrc = '--keyname';
        } else {
            $keyname = guess_keyname($cmd);
            $keysrc = 'guess_keyname';
        }
        $key = "$keysdir/$keyname";
    }

    unless (-f $key && -f "$key.pub") {
        my @key;
        @key = -d $keysdir ? read_dir($keysdir) : ('(absent)');
        push @error, "Files ($key $key.pub) from $keysrc not present,\n  $keysdir contains (@key)";
    }

    ### Encode parameters, maybe
    #
    # Remote script using this key decodes the parameters
    @arg = quote64_args(@arg) if $key =~ m{/restart-server$};

    ### Go / no-go
    #
    if (@error) {
        show_syntax($keysdir, $dlu, @error);
    } elsif ($opt{ident}) {
        print "$key\n";
    } elsif ($opt{path}) {
        my $tmp = $opt{path} eq 'tmp' ? 'tmp/' : '';
        my $dir = "/www/$tmp$dlu";
        print "$dir\n";
    } else {
        my @cmd = ('ssh');

        # Withhold stuff from remote - local XServer & keyring
        push @cmd, '-Ax';
        delete $ENV{SSH_AUTH_SOCK};

        push @cmd, -i => $key;

        $desthost .= " \\\n   " if $opt{dryrun};
        push @cmd, "$remuser\@$desthost", $cmd, @arg;

        if ($opt{dryrun}) {
            warn "[d] Command would be\n @cmd\n";
            exit 0;
        }

        exec @cmd;
        die "Failed: @cmd";
    }

    return;
}

sub do_getopt {
    # Avoid stealing options from the remote command
    Getopt::Long::Configure(qw( bundling require_order ));
    GetOptions(\%opt, 'help|h', 'keyname|k=s', 'keyfile|K=s',
               'utilities|u', 'ident|i', 'path|p=s',
               'dryrun|dry-run|n')
      or die "Bad options\n";
    die "Cannot resolve key - specified by keyname and keyfile\n"
      if exists $opt{keyname} && exists $opt{keyfile};

    pod2usage(-exitstatus => 0, -verbose => 2) if $opt{help};

    return;
}


sub ensure_uniC {
    my ($guard, $guarded) = ('--done-cal');
    my $want = 0x60; # require -CAL for locale-conditional Unicode @ARGV

    if (@ARGV && $ARGV[0] eq $guard) {
        $guarded = 1;
        shift @ARGV;
    }

    if ((${^UNICODE} & $want) != $want) {
        my @reexec = ($^X, "-CAL", $0, $guard, @ARGV);
        die "Re-exec(@reexec): something went wrong" if $guarded;
        exec @reexec;
        die "Failed to re-exec(@reexec): $!";
    }

    return;
}

sub quote64_args {
    my @arg = @_;

    my $json_utf8 = encode_json(\@arg); # also does UTF8 encoding
    my $b64 = encode_base64($json_utf8); # may contain "\n"s
    warn explain_uniC(arg => \@arg, json_utf8 => $json_utf8,
                      output_base64 => $b64) if $opt{dryrun};
    return $b64;
}

sub explain_uniC {
    my %info = @_;

    my @no_tbs = (@{ $info{arg} }, $info{json_utf8});
    foreach (@no_tbs) {
        s{([^\x0A\x20-\x7F])}{sprintf(ord($1) > 255 ? "\\x{%04X}" : "\\x%02X", ord($1))}eg;
    }
    $info{tbs_quoted} = \@no_tbs;
    $info{unicode_config} = { '${^UNICODE}' => ${^UNICODE},
                              map { $_=>$ENV{$_} } qw( LC_ALL LC_TYPE LANG ) };

    require YAML;
    return YAML::Dump({ '[d] explain_uniC' => \%info });
}


sub hostinfo { # returns ($dlu, $remuser)
    my ($desthost) = @_;

    if ($desthost =~ m{^web-otterdev-}) {
        return qw( www-dev www-core );
    } elsif ($desthost =~ m{^web-otter(staging|live)-}) {
        return qw( www-live www-core );
    } elsif ($desthost =~ m{^web-ottersand-}) {
        my $user = getpwuid($<);
        return ("$user/www-dev", $user);
    } else {
        die "desthost=$desthost not recognised, cannot set DLU or remuser\n";
    }
}

sub guess_keyname {
    my ($cmd) = @_;
    if (!defined $cmd) {
        warn "[w] without a command, I use an arbitrary keyname\n";
        return 'restart-server';
    }

    my @out;
    while (my ($name, $re) = each %CMD2KEYN) {
        push @out, $name if $cmd =~ $re;
    }
    return $out[0] if 1 == @out;
    die "Cannot guess keyname from command '$cmd'\n";
}

sub keysdir {
    my ($remuser) = @_;
    my $sshdir = "$ENV{HOME}/.ssh";
    my $psdir = "$sshdir/pagesmith"; # contains $key and $key.pub put there by webteam
    my $webvmdir = "$sshdir/smithssh"; # user-maintained
    return $remuser eq 'www-core' ? $psdir : $webvmdir;
}


sub show_syntax {
    my ($keysdir, $dlu, @err) = @_;
    local $" = "\n  ";
    print "Syntax: $0 [ -k <keyname> | -K <keyfile> ] <hostname> <cmd> <args>*
        $0 --ident [ <hostname> [ <cmd> ] ]
        $0 --path < tmp | webdir > <hostname>

Based on options I understood,
  looking for keys in $keysdir/
  utility commands get /www/$dlu/utilities/ prepended

Problems!
  @err
";
    exit 4;
}

main();
