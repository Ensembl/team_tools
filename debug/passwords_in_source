#! /bin/bash

main() {
    ptnfile="$( cd $( dirname "$0" ); pwd )/$( basename "$0" ).ptn"

    # Assume nothing about my working copy, look at origin/master or origin MAIN
    searchy ~/gitwk-anacode/anacode--BROKEN  origin/cvs/main
    searchy ~/gitwk-anacode/ensembl--BROKEN  origin/cvs/main
    searchy ~/gitwk-anacode/ensembl-pipeline origin/cvs/main

    searchy ~/gitwk-anacode/ensembl-otter    origin/master
    searchy ~/gitwk-anacode/team_tools       origin/master
    searchy ~/gitwk-anacode/assembly_viewer  origin/master
    searchy ~/gitwk-anacode/PipeMon          origin/master
}

decolour() {
    perl -pe ' s{\x1b\[(\d+(;\d+)?)?[mK]}{}g '
}

searchy() {
    local branch hits nhit
    cd $1
    branch=$2

    # git-grep(1) will only look at our latest commit
    hits=$( git grep --color=always -i -E -f "$ptnfile" -a -n  $branch )
    nhit="$( printf "%s\n" "$hits" | wc -l )"

    if [ -z "$hits" ]; then
        # Super-thorough but rather vague about where the hit was found
        branch="(everything)"
        hits=$( git fast-export --all | grep -a -i -E --color=always -C5 -n -f "$ptnfile" )
        nhit="$( printf "%s\n" "$hits" | decolour | grep -E '^[0-9]+:' | wc -l )"
    fi

    printf "\n   %s hits in %s on %s\n" $nhit "$(pwd)" "$branch"
    if [ -n "$hits" ]; then
        printf "%s\n" "$hits"
    fi
}

main
