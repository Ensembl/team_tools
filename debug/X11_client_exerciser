#! /software/bin/perl-5.12.2
use strict;
use warnings;
use v5.10;
use YAML 'Dump';
use Tk;
use POSIX ":sys_wait_h";
use Time::HiRes qw( usleep gettimeofday tv_interval );

my %kid; # key = pid
my $parent = $$;
my $debug = 0;

=head1 NOTES

=head2 xrestop

xrestop idle currently reports 80 connections, then I add 166
separately forked Perl/Tk processes and the last one cannot connect.

=head2 xlsclients

xlsclients does not show clients!

It shows an entry for each of many MainWindows made by one Perl/Tk
instance.  Xserver will create at least 1000, and they cause slowdown
not failure.

It shows nothing for xrestop, but that does need a connection to
proceed.

=cut

sub main {
    my %win;
    $SIG{INT} = sub { die "Caught SIGINT in $$" };

    my $debug_prog = $0;
    $debug_prog =~ s{[^/]+$}{max_X11_clients.sh}
      or die "Can't make debug_prog from $0";

    select STDERR; # stdout is for $debug_prog
    $|=1;

    # config (in seconds)
    my $grow_after  = $debug ? 15   : 180;
    my $test_border = $debug ?  2.5 :   5;
    my $test_per    = $debug ?  1.5 :   5;
    my $conn_warn   = $debug ?  150 :  50;

    new_junk(100);

    # state
    my $t_grow = [ gettimeofday() ];
    my $t_test = [0,0];
    my $growing;
    while (1) {
        my $grew_ago = tv_interval($t_grow);

        if ($growing) {
            new_junk(1);
        } elsif ($grew_ago >= $grow_after) {
            $growing = 1;
        } elsif (tv_interval($t_test) >= $test_per
                 && $grew_ago > $test_border
                 && $grew_ago < $grow_after - $test_border) {
            spawn(0);
            $t_test = [ gettimeofday() ];
        } # else just wait

        my $full = do_reap();
        if ($full) {
            $growing = 0;
            if ($full < $conn_warn) {
                system(qw( notify-send -i /usr/share/app-install/icons/kalarm.png ),
                       'X11 connections limit',
                       sprintf("There are about %d connections left before ZMap and Otterlace fall over\nI'm holding %d",
                               $full, scalar keys %kid));
            }
            $t_grow = [ gettimeofday() ];
        }

        print ' ' if $debug;
        my $num = keys %kid;
        printf('===%s%s', $num, "\x08" x (3+length($num))) if $debug > 1;

        usleep 0.25E6;
    }
}

sub do_reap {
    my ($full, $zapped, $gone) = (0) x 3;

    while (1) {
        $gone = waitpid(-1, WNOHANG);
        my $exit = $?;
        last unless $gone > 0;
        delete $kid{$gone};

        if ($exit == 0) { # exit 0
            # it demonstrated that at least one connection is spare
        } elsif ($exit == 0x4300) { # exit 67
            # it proved there are no connections spare
            $full ++;
        } elsif ($exit == 0x2) { # sigint
            $zapped ++;
        } else {
            printf("Strange: kid %d gone 0x%x\n", $gone, $exit);
        }
    }

    if ($full) {
        # Connections were all used.  The process which saw this will
        # have zapped some.  Note how many we have.
        $full = $zapped + keys %kid;
        printf("%s full=%d (zapped=%d) est.conn=%d\n",
               iso8601(time()), $full, $zapped, 245 - $full);

        # Current version of notify-send doesn't require an X11 connection
        system(qw( notify-send FULL ),
               sprintf("Full = %d\nHeadroom by zap = %d\nEstimated connections = %d",
                       $full, $zapped, 245 - $full))
          if $debug > 1;
    }

    return $full;
}


sub new_junk {
    my ($N) = @_;
    for (1..$N) {
        spawn(1);
    }
}

sub spawn {
    my ($stay) = @_;
    my $child;
print '>' if $debug;
    for (fork()) { # per http://blogs.perl.org/users/aristotle/2012/10/concise-fork-idiom.html
        when(undef) {
            die "fork failed: $!";
        }
        when (0) {
            undef $SIG{INT};    # allow zap
            my @sib = grep { defined $_ && $_ != $$ } (keys %kid)[0..19];
            my $w = eval { MainWindow->new };
            my $err = $@;
            if ($w) {
                $w->withdraw;
print $stay ? '+' : '.' if $debug;
                MainLoop if $stay;
                exit 0;
            } elsif ($err =~ /couldn't connect to display/) {
                # 'Maximum number of clients reached' sent to
                # STDERR by Tk

                kill 'INT', @sib; # make some space promptly
                print "\n"; # finish the message written already to STDERR
                exit 67;
            } else {
                die "New window failed: $@";
            }
        }
        default {
            $child = $_;
            $kid{$child} = 1;
        }
    }
    return $child;
}

END { zap() if $$ == $parent }

sub zap {
    foreach my $p (keys %kid) { kill 'INT', $p }
    %kid = ();
    return ();
}


sub getwin {
    my ($old_win) = @_;

    open my $fh, '-|', qw( xlsclients -m 10000 -al )
      or die "Pipe from xlsclients failed: $!";
    my @ln = <$fh>;
    unless (close $fh) {
        warn "Piped from xlsclients failed: $!/$? - skip it\n";
        return ();
    }

    my ($id, %new, @change);
    while (@ln) {
        my $ln = shift @ln;
        chomp $ln;
        if ($ln =~ m{^Window (0x[0-9a-f]+):\s*$}) {
            push @change, putwin($old_win, \%new, $id);
            $id = $1;
            die Dump({ "Dup window id" => { id => $id, old => $new{$id} }})
              if exists $new{$id};
            $new{$id} = {};
        } elsif ($ln =~ m{^(?:'')?\s+([a-zA-Z /]+):\s*(.*)$}) {
            # no idea what the leading /^''/ are doing, assume they are noise
            my ($k, $v) = ($1, $2);
            my $win = $new{$id};
            die Dump({ "Dup key" => { id => $id,
                                      kv_new => [ $k, $v ],
                                      old => $win } })
              if exists $win->{$k};
            $win->{$k} = $v;
        } else {
            die "Failed to parse xlsclients line '$ln'"
        }
    }
    push @change, putwin($old_win, \%new, $id);

    while (my ($id, $data) = each %$old_win) {
        next if defined $new{$id};
        push @change, { gone => { id => $id, data => $old_win->{$id} } };
    }

    %$old_win = %new;
    return @change;
}

sub putwin {
    my ($olds, $new, $id) = @_;
    return () unless defined $id; # called before input is taken

    if (!defined $olds->{$id}) {
        return { new => { id => $id,
                          data => $new->{$id} } };
    } elsif (Dump($new->{$id}) eq Dump($olds->{$id})) {
        # no change
    } else {
        return { change => { id => $id,
                             old => $olds->{$id},
                             data => $new->{$id} } };
    }
}


sub iso8601 {
    my ($utime) = @_;
    my @t = localtime($utime);
    return sprintf("%04d-%02d-%02d %02d:%02d:%02d", $t[5]+1900, $t[4]+1, @t[3,2,1,0]);
}


main();
