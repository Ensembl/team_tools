#! /software/bin/perl-5.12.2
use strict;
use warnings;
use v5.10;
use YAML 'Dump';
use Tk;

my @junk_windows;
my $info;
sub main {
    my %win;

    my $mw = MainWindow->new(-title => 'X11 client counter');
    $mw->Button(-text => 'More', -command => [ \&new_junk, 50 ])->pack;
    $mw->Button(-text => 'Vape', -command => \&reset_junk)->pack;
    $info = $mw->Text(-border => 2)->pack;

    $mw->repeat(5000, sub {
        my @changes = getwin(\%win);
        print Dump([ { time => scalar localtime(), count => scalar keys %win },
                     @changes ]) if @changes;
    });

    MainLoop;
}


sub new_junk {
    my ($N) = @_;
    for (1..$N) {
        for (fork()) { # per http://blogs.perl.org/users/aristotle/2012/10/concise-fork-idiom.html
            when(undef) {
                die "fork failed: $!";
            }
            when (0) {
                exec(q{perl -MTk -e '$w=MainWindow->new->withdraw; MainLoop'});
                die "exec failed";
            }
            default {
                push @junk_windows, $_;
            }
        }
    }
    $info->Contents('Window count = '.@junk_windows);
    return ();
}

END { reset_junk() }

sub reset_junk {
    foreach my $w (@junk_windows) { kill 'INT', $w }
    @junk_windows = ();
    $info->Contents('Window count = '.@junk_windows) if $info && Tk::Exists($info);
    return ();
}


sub getwin {
    my ($old_win) = @_;

    open my $fh, '-|', qw( xlsclients -m 10000 -al )
      or die "Pipe from xlsclients failed: $!";
    my @ln = <$fh>;
    unless (close $fh) {
        warn "Piped from xlsclients failed: $!/$? - skip it\n";
        return ();
    }

    my ($id, %new, @change);
    while (@ln) {
        my $ln = shift @ln;
        chomp $ln;
        if ($ln =~ m{^Window (0x[0-9a-f]+):\s*$}) {
            push @change, putwin($old_win, \%new, $id);
            $id = $1;
            die Dump({ "Dup window id" => { id => $id, old => $new{$id} }})
              if exists $new{$id};
            $new{$id} = {};
        } elsif ($ln =~ m{^(?:'')?\s+([a-zA-Z /]+):\s*(.*)$}) {
            # no idea what the leading /^''/ are doing, assume they are noise
            my ($k, $v) = ($1, $2);
            my $win = $new{$id};
            die Dump({ "Dup key" => { id => $id,
                                      kv_new => [ $k, $v ],
                                      old => $win } })
              if exists $win->{$k};
            $win->{$k} = $v;
        } else {
            die "Failed to parse xlsclients line '$ln'"
        }
    }
    push @change, putwin($old_win, \%new, $id);

    while (my ($id, $data) = each %$old_win) {
        next if defined $new{$id};
        push @change, { gone => { id => $id, data => $old_win->{$id} } };
    }

    %$old_win = %new;
    return @change;
}

sub putwin {
    my ($olds, $new, $id) = @_;
    return () unless defined $id; # called before input is taken

    if (!defined $olds->{$id}) {
        return { new => { id => $id,
                          data => $new->{$id} } };
    } elsif (Dump($new->{$id}) eq Dump($olds->{$id})) {
        # no change
    } else {
        return { change => { id => $id,
                             old => $olds->{$id},
                             data => $new->{$id} } };
    }
}


main();
