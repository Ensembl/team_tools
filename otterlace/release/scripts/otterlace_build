#!/bin/bash


# TO DO

# Install the server-side data files (which are allegedly managed in
# the ace_skeleton CVS repository).

# Locking.  But is this possible when the files we are changing are
# NFS-mounted?  Maybe ssh to a designated lock host and lock a local
# file?

# / TO DO


# NB

# We must build the binary XRemote module with the same version of
# Perl that our scripts use, because binary modules are installed to
# version-dependent locations.  Therefore we start the $PATH with
# (location of preferred Perl).

# But /software/perl-5.8.8/bin/perl (which was used via
# /software/bin/perl ) will try to build the binary XRemote module
# with the same version of gcc that it was built with, which is not
# the version of gcc on modern hosts.  Therefore we tell perl to set
# CC and LD to gcc, so that the build will use the local gcc.

# / NB


. "$( dirname "$0" )/_otterlace.sh"


# go to the right place first
cd "$( dirname "$0" )/../.."
ensembl_otter_root="$( pwd )"


version_major="$( config version_major )"
version_minor="$( config version_minor )"
testing="$( config testing )"
client_ensembl_version="$( config client_ensembl_version )"
zmap_path="$( config zmap_path )"

humpub_branch="humpub-branch-${version_major}"

if [ -n "$version_minor" ]
then
    version="${version_major}.${version_minor}"
    humpub_release="humpub-release-${version_major}-${version_minor}"
else
    version="$version_major"
    humpub_release="HEAD"
fi

# sanity check
if [ -z "$version" ]
then
    echo "error: the otterlace version is not set" >&2
    exit 1
fi

zmap_home=~zmap
zmap_root="${zmap_home}/${zmap_path}"
zmap_prefix="${zmap_root}/Linux_$( uname -m )"

# EXTERNAL PARAMETERS
build_log=/nfs/anacode/otterlace/ensembl_otter_build_log.txt
anacode_cvsroot=:ext:cvs.internal.sanger.ac.uk:/repos/cvs/anacode
ensembl_cvsroot=:ext:cvs.sanger.ac.uk:/cvsroot/ensembl
otterlace_server_root=/nfs/WWWdev/SANGER_docs
otterlace_prefix="/software/anacode/otter/otter_rel${version}"
# echo "otterlace_prefix = '${otterlace_prefix}'" ; exit # uncomment to test
# / EXTERNAL PARAMETERS


ensembl_cvs_flags="-r branch-ensembl-${client_ensembl_version}"

cvs_run() {
    # run CVS quietly
    cvs "$@" 2>&1 | grep -v -- '^U '
}

with_new_directory() {
    local dir command
    dir="$1"
    command="$2"
    shift 2
    rm -rf -- "$dir" &&
    mkdir -v -p -- "$dir" &&
    chgrp -v anacode "$dir" &&
    chmod -v g+s "$dir" &&
    "$command" "$dir" "$@"
    status=$?
    chmod -R ug+rw "$dir" &&
    ( exit "$status" )
}

git_cache_create() {
    local install_dir
    install_dir="$1"

    # we create the cache using the modules in the git repository and
    # test by dumping the cache using the modules in the installation
    # directory

    perl -I"${ensembl_otter_root}/modules" -MBio::Otter::Git \
        -e 'Bio::Otter::Git->_create_cache(@ARGV);' "$install_dir" &&
    perl -I"$install_dir" -MBio::Otter::Git \
        -e 'Bio::Otter::Git->dump;' &&
    /bin/true
}

otterlace_server_install_modules() {
    local install_dir source_dir
    install_dir="$1"
    source_dir="${ensembl_otter_root}/modules/Bio"
    cp -r "$source_dir" "$install_dir" &&
    git_cache_create "$install_dir" &&
    /bin/true
}

otterlace_server_install_cgi() {
    local install_dir source_dir
    install_dir="$1"
    source_dir="${ensembl_otter_root}/scripts/apache"
    cp -r "$source_dir"/* "$install_dir" &&
    /bin/true
}

otterlace_server_install() {
    local module_dir cgi_bin_dir
    echo ""
    echo "installing server"
    module_dir="${otterlace_server_root}/lib/otter/${version_major}"
    cgi_bin_dir="${otterlace_server_root}/cgi-bin/otter/${version_major}"
    echo "installing server: perl modules" &&
    with_new_directory "$module_dir" otterlace_server_install_modules &&
    echo "installing server: CGI scripts" &&
    with_new_directory "$cgi_bin_dir" otterlace_server_install_cgi &&
    /bin/true
}

otterlace_client_install_perl_modules() {
    local install_dir
    install_dir="$1"

    echo &&
    echo "installing perl modules" &&

    ( cd "$install_dir" &&

        cvs_run -d "$ensembl_cvsroot" \
            checkout $ensembl_cvs_flags \
            ensembl/modules &&

        cvs_run -d "$ensembl_cvsroot" \
            checkout $ensembl_cvs_flags \
            ensembl-variation/modules &&

        # Needs for-loop a la make_dist (or function)

        ( if [ -n "$version_minor" ]
          then
              cvs_run -d "$anacode_cvsroot" rtag -r "$humpub_branch" "$humpub_release" PerlModules/Hum
          fi ) &&
        cvs_run -d "$anacode_cvsroot" checkout -r "$humpub_release"                    PerlModules/Hum &&

        ( if [ -n "$version_minor" ]
          then
              cvs_run -d "$ensembl_cvsroot" rtag -r "$humpub_branch" "$humpub_release" ensembl-analysis/modules
          fi ) &&
        cvs_run -d "$ensembl_cvsroot" checkout -r "$humpub_release"                    ensembl-analysis/modules &&

        mkdir -p -- ensembl-otter &&
        cp -r \
            ${ensembl_otter_root}/{modules,scripts,tk} \
            ensembl-otter &&

        /bin/true ) &&

    git_cache_create "${install_dir}/ensembl-otter/modules" &&

    /bin/true
}

otterlace_client_install_scripts() {
    local install_dir
    install_dir="${1}/bin"

    mkdir -p -- "$install_dir" &&
    cp -- ${ensembl_otter_root}/scripts/client/* "$install_dir" &&
    /bin/true
}

otterlace_client_install_zmap() {

    # sanity test
    if ! [ -d "$zmap_prefix" ]
    then
        echo "error: client ZMap install for ${arch} aborted: the ZMap directory '${zmap_prefix} is missing or invalid" >&2
        exit 1
    fi

    local install_dir bin_dir build_dir
    install_dir="$1"
    bin_dir="${install_dir}/bin"
    build_dir="/tmp/otterlace_xremote_build/$$"
    rm -rf -- "$build_dir" &&
    mkdir -p -- "$build_dir" &&
    ( cd "$build_dir" &&
        cp -r -- "${zmap_root}/ZMap/src/perl/X11-XRemote-0.01" . &&
        cd X11-XRemote-0.01 &&
        perl Makefile.PL \
            PREFIX=${install_dir} \
            CC=gcc \
            LD=gcc \
            --with-zmap-libs "${zmap_prefix}/lib" \
            --with-zmap-inc  "${zmap_prefix}/include" \
            --with-symbols \
            &&
        make &&
        make install &&
        rm -rf -- "$build_dir" &&
        /bin/true ) &&
    mkdir -p -- "$bin_dir" &&
    cp -- ${zmap_prefix}/bin/* "$bin_dir" &&
    /bin/true
}

otterlace_client_install_client() {
    local install_dir
    install_dir="$1"
    otterlace_client_install_perl_modules "$install_dir" &&
    otterlace_client_install_scripts      "$install_dir" &&
    otterlace_client_install_zmap         "$install_dir" &&
    /bin/true
}

otterlace_client_install() {
    local arch
    arch="$( uname -m )"

    echo ""
    echo "client install"
    echo "network host: ${otterlace_client_host}"
    echo "host name: $( hostname )"
    echo "arch: ${arch}"
    echo "debian version: $( cat /etc/debian_version )"

    otterlace_local="/software/anacode/bin/otterlace_rel${version}"

    echo &&
    echo "removing old otterlace installation" &&
    with_new_directory "$otterlace_prefix" otterlace_client_install_client &&
    cp -- dist/templates/otterlace "$otterlace_local" &&
    sed -i \
        -e "/^version=/s/=.*/=${version}/" \
        -e "/^testing=/s/=.*/=${testing}/" \
        "$otterlace_local" &&
    chmod -v 775 "$otterlace_local" &&
    /bin/true
}

otterlace_install() {

    install="${ensembl_otter_root}/dist/scripts/$( basename "$0" )"

    otterlace_server_install &&
    for host in \
        lenny-dev32 \
        lenny-dev64 \
        ; do
        ssh -A "$host" "$install" "--client-install=${host}"
    done

    date="$( date +'%Y/%m/%d-%H:%M:%S' )"
    commit="$( git rev-list --max-count=1 HEAD )"
    if [ -z "$commit" ]
    then
        commit="NONE"
    fi
    echo "${date}: ${version}: ${commit}" >> "$build_log"
}

# environment
export PATH=/software/perl-5.12.2/bin:/bin:/usr/bin:/usr/local/bin
export LD_LIBRARY_PATH=
umask 002 # NB: running over ssh can set a surprising umask

if [ -n "$1" ]
then
    case "$1" in
        --client-install=*)
        otterlace_client_host="$( echo "$1" | sed -n -e 's|^--client-install=||p' )"
        otterlace_client_install
        ;;
        *) echo "$( basename "$0" ): usage error" >&2 ; exit 1 ; ;;
    esac
else
    otterlace_install
fi
