#!/bin/bash


# TO DO

# Install the server-side data files (which are allegedly managed in
# the ace_skeleton CVS repository).

# Locking.  But is this possible when the files we are changing are
# NFS-mounted?  Maybe ssh to a designated lock host and lock a local
# file?

# / TO DO


# NB

# We must build the binary XRemote module with the same version of
# Perl that our scripts use, because binary modules are installed to
# version-dependent locations.  Therefore we start the $PATH with
# (location of preferred Perl).

# But Perl will try to build the binary XRemote module with the same
# version of gcc that it was built with, which is not the version of
# gcc on modern hosts.  Therefore we set CC and LD to gcc, so that
# Perl will use the local gcc.

# / NB



# Process commandline args & optional variables passed in environment.
# May chdir un-scoped, or exit or exec
get_opts_inputvars() {
    # zmap_trees, zmap_build, ensembl_otter_root, client_build_hosts : not local
    # local_client_only : not local
    local sw opt

    while [[ $# > 0 ]] && [ "${1:0:1}" = "-" ]; do
        opt="$1"
        shift
        case "$opt" in
            -h | --help) show_help_exit "Help requested." ;;
            --) shift
                break ;;
            --show-path)
                # this is here to assist debugging of problems-finding-self
                printf "PATH is now\n    %s\n" \
                    "$( echo $PATH | sed -e 's/:/\n    /g' )"
                exit 0 ;;
            --hosts | -H)
                # this is a convenience option, so _otterlace_build_config.pl can remain "internal"
                exec _otterlace_build_config.pl -list ;;
            --server-only | -S)
                [ -n "$client_build_hosts" ] && bail "Was about to overwrite client_build_hosts='$client_build_hosts'"
                client_build_hosts=' '
                ;;
            --local-client-only | -L)
                [ -n "$otterlace_client_host" ] \
                    && bail "Was abot to overwrite otterlace_client_host='$otterlace_client_host'"
                otterlace_client_host="$( hostname )"
                local_client_only=1
                ;;
            *)
                show_help_exit "Unknown option: $opt"
                ;;
        esac
    done

    [ "$client_build_hosts" = ' ' ] && [ -n "$local_client_only" ] && \
        show_help_exit "--server-only and --local-client-only are mutually exclusive."

    # Inner otterlace_client_install() runs needs one build directory,
    # passed in by otterlace_install_all .  Already in $zmap_build.

    # Outermost otterlace_install_all() run accepts multiple ZMap
    # build trees.  Store in $zmap_trees.
    #
    # Assume it is a space-separated list of directories containing no
    # funnychars.

    if [ -n "$local_client_only" ] && [[ $# > 1 ]]; then
        show_help_exit "--local-client-only mode takes only a single ZMap build."
    fi

    zmap_trees="$*"

    if [ -z "$otterlace_client_host" ] || [ -n "$local_client_only" ]; then
        # we are not doing inner otterlace_client_install() from otterlace_install_all()

        if [ -n "$zmap_build" ] && [ -z "$zmap_trees" ]; then
            zmap_trees="$zmap_build"
            unset zmap_build
            echo ' [W] manual $zmap_build override is deprecated, commit here if you still need it' >&2
            sleep 1
        fi

        [ -n "$zmap_trees" ] || [ "$client_build_hosts" = ' ' ] || show_help_exit "Doing client build, but have no zmap_trees."
    fi

    if [ -n "$local_client_only" ]; then
        zmap_build="$zmap_trees"
        unset zmap_trees
    fi

    if [ -n "$ensembl_otter_root" ]
    then
        cd "$ensembl_otter_root"
    else
        ensembl_otter_root="$( pwd )"
    fi
}

show_help_exit() {
    local problem
    problem="$1"

    printf "Usage: %s [ options ] <zmap_build_dir>*

 This is %s

 (!) %s

 Default is to build the Otter Server, and the internal Linux clients
 to /software/anacode .  This requires one ZMap build directory, from
 which the correct Otterlace build host(s) are looked up in
 build-config.yaml .

 Multiple ZMap builds may be given, normally during OS transition.
 Doing this adds extra build hosts.

 Options:

    --help | -h			Show this help (and stop)
    --hosts | -H		Show build hosts list (and stop)

    --server-only | -S		Build Otter Server, but no clients

    --local-client-only | -L	Build Otter Client on this host

" "$( basename "$0" )" "$thisprog" "$problem" >&2
    exit 1
}


# Set environment variables about self, umask.  These don't take
# parameters and are needed early (during get_opts_inputvars)
setup_self_globals() {
    # shared config and functions
    . "$( dirname "$0" )/_otterlace.sh" || exit 1

    osname="$( uname -s )"

    case "$osname" in
        Darwin)
            # Assume for now that PATH already contains the correct container, inc. perl
            export PATH=$PATH:$dist_scripts
            install_group="$( id -g -n )"
            ;;

        *)
            export PATH=/software/perl-5.12.2/bin:/bin:/usr/bin:/usr/local/bin:$dist_scripts
            # XXX: insertion of a Perl build in PATH should probably be under control of something like otter_ipath_get,
            # and should from there be replicated to the otterlace wrapperfile (and any other built component running under Perl, probably via $PATH),
            # t/swac_stopwords.t will be failing while this is here...
            install_group="anacode"
            ;;
    esac

    export LD_LIBRARY_PATH=
    umask 002 # NB: running over ssh can set a surprising umask
}

# Set some environment variables, global variables for the script
setup_globals() {

    perl -M5.12.2 -e 1 || bail "Think I have the wrong Perl"

    config_get version_major
    config_get version_minor
    config_get client_ensembl_version

    check_remove_existing_directories=true

    if [ -n "$version_minor" ]
    then
        # (already tagged by otterlace_release_tag)
        version="${version_major}.${version_minor}"
        cvs_humpub_release="humpub-release-${version_major}-${version_minor}"
    else
        # (ensembl-otter dev branch)
        version="$version_major"
        cvs_humpub_release="HEAD"
    fi

    # sanity check
    if [ -z "$version" ]
    then
        echo "error: the otterlace version is not set" >&2
        exit 1
    fi

    # EXTERNAL PARAMETERS
    : ${build_log:=/nfs/anacode/otterlace/ensembl_otter_build_log}
    anacode_cvsroot=:ext:cvs.internal.sanger.ac.uk:/repos/cvs/anacode
    ensembl_cvsroot=:ext:cvs.sanger.ac.uk:/cvsroot/ensembl
    # / EXTERNAL PARAMETERS

    # check early, else it will be too late
    [ -d "$build_log" ] && [ -w "$build_log" ] || \
        bail "build_log=$build_log: should be a writable directory (was a create/append-forever file, see RT#223520)"

    otter_ipath_get otter_home


    ensembl_cvs_flags="-r branch-ensembl-${client_ensembl_version}"
    # (ensembl libs on the server are provided by the web team)
}


with_new_directory() {
    local dir command
    dir="$1"
    command="$2"
    shift 2
    if [ -e "$dir" ] ; then
        if $check_remove_existing_directories && [ -n "$version_minor" ]
        then
            echo "error: directory '${dir}' already exists, refusing to remove it" >&2
            return 1
        else
            write_build_log_entry --level deleting_old --dir "$dir"
            rm -rf -- "$dir"
        fi
    fi &&
    mkdir -v -p -- "$dir" &&
    chgrp -v "${install_group}" "$dir" &&
    chmod -v g+s "$dir" &&
    "$command" "$dir" "$@"
    status=$?
    echo " [i] with_new_directory: $command returned $status"
    chmod -R ug+rw "$dir" &&
    ( exit "$status" )
}

git_cache_create() {
    local install_dir
    install_dir="$1"

    # we create the cache using the modules in the git repository and
    # test by dumping the cache using the modules in the installation
    # directory

    perl -I"${ensembl_otter_root}/modules" -MBio::Otter::Git \
        -e 'Bio::Otter::Git->_create_cache(@ARGV);' "$install_dir" &&
    perl -I"$install_dir" -MBio::Otter::Git \
        -e 'Bio::Otter::Git->dump;' &&
    true
}

otterlace_script_vars_update() {
    (
        otter_ipath_get SUBST_anasoft    swac
        otter_ipath_get SUBST_OTTER_HOME otter_home
        export SUBST_version="$version"
        export SUBST_anasoft SUBST_OTTER_HOME
        perl -i -pe '
 if (!$finished && /^(\w+)=$/) {
   $v=$ENV{"SUBST_$1"};
   die qq{No value for "$1"} unless defined $v;
   chomp;
   $_ .= qq{"$v"\n};
   $substs ++;
 } elsif (/^\s*(#|$)/) {
 } elsif ($substs) {
   $finished = 1;
 }' "$1"
        )
}



otterlace_server_install_modules() {
    local install_dir source_dir
    install_dir="$1"
    source_dir="${ensembl_otter_root}/modules/Bio"
    cp -r "$source_dir" "$install_dir" &&
    git_cache_create "$install_dir" &&
    true
}

otterlace_server_install_cgi() {
    local install_dir source_dir
    install_dir="$1"
    source_dir="${ensembl_otter_root}/scripts/apache"
    cp -r "$source_dir"/* "$install_dir" &&
    true
}

otterlace_server_install() {
    local web_lib web_cgi check_remove_existing_directories
    echo ""
    echo "installing server"
    otter_ipath_get web_lib
    otter_ipath_get web_cgi
    check_remove_existing_directories=false
    echo "installing server: perl modules" &&
    with_new_directory "$web_lib" otterlace_server_install_modules &&
    echo "installing server: CGI scripts" &&
    with_new_directory "$web_cgi" otterlace_server_install_cgi &&
    write_build_log_entry --level server \
        --lib "$web_lib" \
        --cgi "$web_cgi" &&
    true
}



otterlace_client_install_perl_modules() {
    local install_dir
    install_dir="$1"

    echo &&
    echo "installing perl modules" &&

    ( cd "$install_dir" &&

        cvs -Q -f -d "$ensembl_cvsroot" \
            checkout -P $ensembl_cvs_flags \
            ensembl/modules &&

        cvs -Q -f -d "$ensembl_cvsroot" \
            checkout -P $ensembl_cvs_flags \
            ensembl-variation/modules &&

        cvs -Q -f -d "$anacode_cvsroot" \
            checkout -P -r "$cvs_humpub_release" \
            PerlModules/Hum &&

        if [ "${version_major}" -le 70 ]; then # ensembl-analysis not required after v70
            cvs -Q -f -d "$ensembl_cvsroot" \
                checkout -P -r "$cvs_humpub_release" \
                ensembl-analysis/modules
        fi &&

        mkdir -p -- ensembl-otter &&
        cp -r \
            ${ensembl_otter_root}/{modules,scripts,tk} \
            ensembl-otter &&

        true ) &&

    git_cache_create "${install_dir}/ensembl-otter/modules" &&

    true
}

otterlace_client_install_scripts() {
    local install_dir src_subdir
    install_dir="${1}/bin"
    src_subdir="scripts/client"
    [ -n "${2}" ] && src_subdir="scripts/${2}/client"

    mkdir -p -- "$install_dir" &&
    cp -- ${ensembl_otter_root}/${src_subdir}/* "$install_dir" &&
    true
}

otterlace_client_install_zmap() {
    local install_dir bin_dir build_dir
    install_dir="$1"
    bin_dir="${install_dir}/bin"
    build_dir="/tmp/otterlace_xremote_build/$$"
    rm -rf -- "$build_dir" &&
    mkdir -p -- "$build_dir" &&
    ( cd "$build_dir" &&
        cp -r -- "${zmap_build}/ZMap/src/perl/X11-XRemote-0.01" . &&
        cd X11-XRemote-0.01 &&
        perl Makefile.PL \
            INSTALL_BASE=${install_dir} \
            CC=gcc \
            LD=gcc \
            --with-zmap-libs "${zmap_prefix}/lib" \
            --with-zmap-inc  "${zmap_prefix}/include" \
            --with-symbols \
            &&
        make &&
        make test &&
        make install &&
        rm -rf -- "$build_dir" &&
        true ) &&
    mkdir -p -- "$bin_dir" &&
    cp -- ${zmap_prefix}/bin/{zmap,tace,sgifaceserver,blixemh,dotter,belvu,xremote} "$bin_dir" &&
    cp -r -- "${zmap_prefix}/share" "$install_dir" &&
    true
}

otterlace_client_edit_dist_macos() {
    local install_dir macos_dist_dir plist_buddy info_plist
    install_dir="$1"

    macos_dist_dir="${install_dir}/ensembl-otter/scripts/MacOS/dist"
    plist_buddy="/usr/libexec/PlistBuddy"
    info_plist="${macos_dist_dir}/Info.plist"

    # These are edited with version information here since we know
    # what version we are building, but they are copied into place
    # outside the 'otter_swac' tree by the calling script,
    # MacOS/install_otterlace.sh, which knows where to put them.

    # MacOS-specific startup script, chains to standard otterlace script
    otterlace_script_vars_update "${macos_dist_dir}/otterlace" &&

    # Info.plist file contains version number
    "${plist_buddy}" -c "Set :CFBundleShortVersionString ${version}" "${info_plist}" &&
    "${plist_buddy}" -c "Set :CFBundleVersion            ${version}" "${info_plist}" &&

    # Copy out setting of OTTER_HOME and modify anasoft
    # in standard otterlace_env.sh script
    sed -i.bak \
        -e '/^OTTER_HOME=/s/^/#/' \
        -e '/^anasoft=/s/$/"$OTTER_SWAC"/' \
        "${install_dir}/bin/otterlace_env.sh" \
        &&
    rm "${install_dir}/bin/otterlace_env.sh.bak" &&

    true
}

otterlace_client_install_os() {
    local install_dir
    install_dir="$1"

    case "$osname" in
        Darwin)
            otterlace_client_install_scripts "$install_dir" "MacOS" &&
            otterlace_client_edit_dist_macos "$install_dir"         &&
            true
            ;;
        *)
            true
            ;;
    esac
}

otterlace_client_install_client() {
    local install_dir
    install_dir="$1"
    otterlace_client_install_perl_modules "$install_dir" &&
    otterlace_client_install_scripts      "$install_dir" &&
    otterlace_client_install_zmap         "$install_dir" &&
    otterlace_client_install_os           "$install_dir" &&
    true
}

otterlace_client_install() {
    local arch
    # not local: zmap_prefix
    arch="$( uname -m )"

    echo ""
    echo "  client install"
    echo "  intended host: ${otterlace_client_host}"
    echo "  host name: $( hostname )"
    echo "  os name: ${osname}"
    echo "  arch: ${arch}"
    echo "  distro version: $( lsb_release -sc 2>/dev/null || echo 'no release codename' )"

    # zmap_prefix is only meaningful during a client install
    zmap_prefix="${zmap_build}/${osname}_${arch}"
    [ -d "$zmap_prefix" ] || bail "error: client install for ${osname}_${arch} aborted: the ZMap directory ${zmap_prefix} is missing or invalid"

    echo &&
    echo "removing old otterlace installation" &&
    with_new_directory "$otter_home" otterlace_client_install_client &&
    otterlace_script_vars_update "${otter_home}/bin/otterlace_env.sh" &&
    sed -i.bak \
        -e '/^otterlace_installed=/s/=.*$/=true/' \
        "${otter_home}/bin/otterlace" \
        &&
    rm "${otter_home}/bin/otterlace.bak" &&
    (
        zmap="$(     "${otter_home}/bin/zmap"    --version 2>&1 )" || bail "ZMap fail: $zmap"
        seqtools="$( "${otter_home}/bin/blixemh" --version 2>&1 )" || bail "seqtools fail: $seqtools"
        # GNU readlink not available on MacOS, so we use 'cd' and 'pwd -P' instead
        zmap_prefix_real="$( cd "$zmap_prefix" 2>/dev/null && pwd -P || echo ?? )"
        if [ "$zmap_prefix" = "$zmap_prefix_real" ]; then
            is_ln=""
        else
            is_ln=" -> $zmap_prefix_real"
        fi
        write_build_log_entry --level client \
            --zmap_prefix "$zmap_prefix$is_ln" \
            --zmap     "$zmap"     \
            --seqtools "$seqtools"
        ) &&
    echo " [i] finished otterlace_client_install for $otterlace_client_host" &&
    true
}

otterlace_install_all() {
    local env_cmd ssh_cmd

    if [ "$client_build_hosts" = ' ' ]; then
        # This value started off as a quick hack to persuade existing
        # code...  could do better
        echo Building no clients
    elif [ -n "$client_build_hosts" ]; then
        echo ' [W] $client_build_hosts override can (currently) restrict the set of build hosts, but not replace them' >&2
        sleep 1
        # else we would have a local variable
    else
        # choose build hosts to match our zmap build(s)
        client_build_hosts="$( _otterlace_build_config.pl $zmap_trees )" \
            || bail "Bad zmap builds?  No build hosts - no build"
    fi

    otterlace_server_install &&
    for host in $client_build_hosts; do
        export zmap_build="$( _otterlace_build_config.pl -host $host $zmap_trees )" \
            || bail "No zmap_build for $host ..?"
        env_reexport env_cmd \
            otter_swac otter_nfswub otter_suffix \
            ensembl_otter_root zmap_build build_log
        unset zmap_build

        ssh_cmd="ssh -A $host  env $env_cmd otterlace_client_host=$host  $0"
        printf "\n== Client build: $ssh_cmd\n"
        $ssh_cmd || write_build_log_entry --level client --failed "returned $?"
    done

    write_build_log_entry --level all
}

write_build_log_entry() {
    local date commit

    date="$( date +'%Y/%m/%d-%H:%M:%S' )"
    commit="$( git rev-list --max-count=1 HEAD )"
    if [ -z "$commit" ]
    then
        commit="NONE"
    fi

    otterlace_build_log_entry \
        -v -l "$build_log" -- \
        --date     "$date"     \
        --version  "$version"  \
        --commit   "$commit"   \
        --builder  "$thisprog" \
        --user     "$( whoami )"      \
        --host     "$( hostname -s )" \
        "$@"
}



setup_self_globals
get_opts_inputvars "$@"
setup_globals
# echo "otter_home = '${otter_home}'" ; exit # uncomment to test


if [ -n "$otterlace_client_host" ]
then
    otterlace_client_install
else
    otterlace_install_all
fi
