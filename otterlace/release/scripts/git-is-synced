#! /bin/bash

# Emits coloured noise on STDOUT and returns non-zero if any of
#   We can fetch?
#   Is there anything to merge?
#   Is there anything to push?
#   Working copy has modified files?
#
# DOES NOT return non-zero if the working copy contains untracked
# files, unpushed branches or unpushed tags, but may emit noise as a
# warning.
#
# DOES NOT see any problems with branches or tags in the cvs/
# namespace.  See redgrep.
#
#
# Side effects: may bring new object or pack files into the object
# store, but will not move any refs (even remote ones).
#
# Depends on: a Git with all the options...  1.6 ish?
#
# We use "push.default=matching" (the default), YMMV.


# This probably belongs in git/contrib, and maybe already does by some
# name; but we need it for the release tagger because that has some
# behaviour which I repeatedly find counter-intuitive.


echodent() {
    echo "$1" | sed -e 's/^/   /'
}

redgrep() {
    # Deliberate blindness to anything in the "cvs/" namespace.
    # XXX: using 'git config' would allow a more general blind-spot
    grep -v ' cvs/' | \
    grep -C100 --colour=always -E "$1"
}

# Returns fail for any of
#   git-fetch(1) returns non-zero
#   remote branches: new, deleted, fast-forwardable, forced-update
#   remote tags: new, moved(!)
try_fetch() {
    local tryfetch notsame
    tryfetch=$(
        git fetch --verbose --prune --dry-run $origin 2>&1 || \
            echo " !! git fetch --dry-run --prune failed: exit code $?";
        git fetch --verbose --tags --dry-run $origin 2>&1 || \
            echo " !! git fetch --dry-run --tags failed: exit code $?"
        )
    notsame=$( echo "$tryfetch" | redgrep '\[(deleted|new branch|new tag|tag update)\]|\.\.[^ ]*|!!|forced update' )
    if [ -z "$notsame" ]; then
        return 0
    else
        echo "git fetch: updates are available from $origin"
        echodent "$notsame"
        return 1
    fi
}

# Returns fail for any of
#   git-remote(1) returns non-zero
#   local branches could push or pull
#   branches which are configured to push, but not configured to pull
remote_stat() {
    local remstat notsynced notpulled
    remstat=$(
        git remote -v show $origin 2>&1 || \
            echo " !! git remote failed: exit code $?"
        )
    notsynced=$( echo "$remstat" | redgrep 'fast-forwardable|local out of date|!!' )
    notpulled=$( echo "$remstat" | remstat_pushers_pull | redgrep 'mismatch|.*branches' )
    if [ -n "$notpulled" ]; then
        echo "git remote show: tracking branch problems with $origin"
        echodent "$notpulled"
        return 1
    fi
    if [ -n "$notsynced" ]; then
        echo "git remote show: not in sync with $origin"
        echodent "$notsynced"
        return 1
    fi
    return 0
}

remstat_pushers_pull() {
    perl -wne 'use strict; our (%push, %pull);
 chomp;
 if (m{^    (\S+)\s+pushes to (\S+)}) {
   $push{$1} = 1;
   print "$_: tracking branch name mismatch\n" unless $1 eq $2;
 }
 if (m{^    (\S+)\s+merges with remote (\S+)}) {
   $pull{$1} = 1;
   print "$_: push branch name mismatch\n" unless $1 eq $2;
 }
 END {
   my @no_pull = grep { !exists $pull{$_} } sort keys %push;
   print "Non-tracking branches (which push but do not pull):\n", map {"  $_\n"} @no_pull if @no_pull;
   print "Found no pushing branches in $. lines - remstat_pushers_pull broken?\n" if !keys %push;
 }
'
}


pushables() {
    local trypush notpushed
    trypush=$(
        git push --dry-run --all $origin 2>&1 || \
            echo " !! git push --dry-run --all failed: exit code $?";
        git push --dry-run --tags $origin 2>&1 || \
            echo " !! git push --dry-run --tags failed: exit code $?"
        )
    notpushed=$( echo "$trypush" | redgrep '\[new (branch|tag)\]|!!' )
    if [ -n "$notpushed" ]; then
        echo "W: Unpushed refs not already on $origin"
        echo "   (assuming these are local developments, not indicating a problem):"
        echodent "$notpushed"
    fi
}


# Returns fail for any of
#   staged changes to be committed
#   tracked files modified but not staged
#
# Lists but DOES NOT fail for untracked files
committable() {
    local ignored untracked diff_staged diff_unstaged
    diff_staged=$(   git diff --name-status --staged )
    diff_unstaged=$( git diff --name-status )
    untracked=$( git clean -dn | sed -e 's/^Would remove //' )
    ignored=$(  git clean -Xdn | sed -e 's/^Would remove //' )
    if [ -n "$untracked" ]; then
        echo "W: Untracked files (assuming these are cruft, not indicating a problem):"
        echodent "$untracked"
    fi
    if [ -n "$verbose" ] && [ -n "$ignored" ]; then
        echo "Ignored files:"
        echodent "$ignored"
    fi
    if [ -z "$diff_unstaged$diff_staged" ]; then
        return 0
    else
        {
            if [ -n "$diff_staged" ]; then
                echo "Staged changes:"
                echodent "$diff_staged"
            fi
            if [ -n "$diff_unstaged" ]; then
                echo "Unstaged changes:"
                echodent "$diff_unstaged"
            fi
        } | redgrep '.* changes:'
        return 1
    fi
}


git_is_synced() {
    local rc

    origin=${1:-origin}
    case "$origin" in
        -h|--help)
            echo "Syntax: $( basename $0 ) [ <remote> ]"
            echo
            echo "Defaults to operating on 'origin'."
            echo "Outputs coloured noise to STDOUT and sets exit code."
            echo "May fetch packfiles or objects, but will not move any refs."
            echo
            echo "This version ignores branches and tags in the cvs/ namespace."
            exit 2
            ;;
    esac >&2

    rc=0
    try_fetch || rc=1
    committable || rc=1
    remote_stat || rc=1
    pushables || rc=1

    return $rc
}


git_is_synced "$1"
