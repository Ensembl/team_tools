#! /bin/sh

# 1) check the Syntax: info about destructive clone cleaning
# 2) run with something like
#      otterlace_overnight --go-there lucid-dev32 ~mca/gitwk-anacode/eo-build ~zmap/BUILD.DEVELOPMENT


die() { # also defined is 'bail'
    rc=$1
    shift
    printf "$@" >&2
    exit $rc
}


show_syntax() {
    printf 'Syntax: %s [ --go-there <hostname> | --here ] <ensembl-otter-build-dir> <otterlace_build-options>

The <otterlace_build-options> are probably just <zmap-tree>.

Performs an overnight (otterlace_dev) build.

Caveats:

  Do NOT run this on your development ensembl-otter checkout,
  it wants a clean HEAD on master,
  and later might get that destructively.

  The --go-there option will not preserve shell meta-characters
  (including space) in following args.

  The --go-there option requires a working $PATH during
  non-interactive ssh.

  It does no locking (maybe it should), but
  you can prevent it running by creating the file
    /nfs/anacode/no_overnight@$USER \n' "$( basename "$0" )"
    exit 2
}


may_i_build() {
    nobuild_fn="/nfs/anacode/no_overnight@$USER"
    # currently, nothing will automatically create this file

    if [ -f "$nobuild_fn" ]; then
        {
            echo; cat "$nobuild_fn"
            echo; stat "$nobuild_fn"
            echo
        } | sed -e 's/^/| /'
        die 22 'Blocked from building by presence of file %s\n' "$nobuild_fn"
    else
        echo "Checked to see file $nobuild_fn - absent, continuing"
    fi
}

FRESH_WAIT=45m
is_zmap_valid() {
    # we could (in theory) be passed some otterlace_build options
    # before the zmap_tree.  worry about that if it happens.
    attempt="$1"
    zmap_tree="$2"

    # Basic sanity check.
    if ! [ -d "$zmap_tree" ]; then
        printf "%s attempt: Expected ZMap build tree at %s\n" \
            "$attempt" "$zmap_tree" >&2
        return 89
    fi

    # Does it look complete?
    if [ -d "$zmap_tree/Dist" ] &&
        [ -f "$zmap_tree"/Dist/zmap-*.tar.gz ] &&
        [ -f "$zmap_tree"/Dist/seqtools-*.tar.gz ]; then

        # OK
        printf '\n\nHave a valid-looking ZMap tree\n'
        {
            echo; stat "$zmap_tree"
            echo; ls -lart "$zmap_tree"
            if [ -h "$zmap_tree" ]; then
                # symlink - show contents
                echo; stat "$zmap_tree/"
                echo; ls -lart "$zmap_tree/"
            fi
            echo
        } | sed -e 's/^/| /'
        return 0
    else
        # Not OK
        case "$attempt" in
            *final)
                echo 'No more waiting around' ;;
            *)
                printf "%s attempt: ZMap at %s is not fresh at %s.  Sleeping %s...\n" \
                    "$attempt" "$zmap_tree" "$( date +%Ft%T )" "$FRESH_WAIT"
                sleep $FRESH_WAIT
                printf "Now it is %s\n" "$( date +%Ft%T )" ;;
        esac
        return 88
    fi
}


do_build() {
    # find the directory
    eo_dir="$1"
    shift

    [ -d "$eo_dir" ] && [ -n "$eo_dir" ] && \
        cd "$eo_dir" && config_get version_major && [ -n "$version_major" ] || \
        die 3 '%s: not my ensembl-otter build source?\n' "$eo_dir"

    printf "%s is building %s in %s\n\n" "$thisprog" "$version_major" "$eo_dir"

    # want it clean
    local_changes="$( git status -s -uall )" || die 4 '%s' "Cannot git-status(1)"
    [ -z "$local_changes" ] || \
        die 5 'In %s, git-status showed local changes\n%s\n' \
        "$eo_dir" "$local_changes"

    # need a recent & complete ZMap build
    if ! is_zmap_valid 1st "$@"; then
        if ! is_zmap_valid 2nd "$@"; then
            is_zmap_valid 3rd_final "$@" || \
                die 90 "ZMap build looks broken\n"
        fi
    fi

    # want it on master
    git checkout -q master && git pull -q --ff-only || \
        die 6 'In %s: need up-to-date master\n' "$eo_dir"

    # build otterlace_dev client and two Otter Servers
    otterlace_build "$@" || \
        die 7 'In %s, "otterlace_build %s": exit code %s\n' "$eo_dir" "$*" "$?"

    if [ -z "$otter_nfswub" ]; then
        otter_nfswub=/nfs/anacode/WEBVM_docs.live \
            otterlace_build --server-only || \
            die 8 'In %s, rebuild at live webservers: exit code %s\n' "$eo_dir" "$?"

        # update webservers
        pubweblish --send=dev:$version_major --send=live:$version_major || \
            die 9 'pubweblish for v%s: exit code %s\n' "$version_major" "$?"

    else
        printf "\n\n *** $0 not building live Otter Server or rsyncing to webservers,
     because destination override is already set
     otter_nfswub=%s\n\n\n" \
            "$otter_nfswub" >&2
    fi

    echo "$0: Finished OK"
}


. "$( dirname "$0" )/_otterlace.sh" || exit 1

may_i_build
if [ "$1" = "--go-there" ]; then
    shift
    go_host="$1"
    shift

    if [ -n "$otter_nfswub" ] ||
        [ -n "$otter_swac" ] ||
        [ -n "$ANACODE_ZIRCON" ] || # obsolete since eb9c97ec
        [ -n "$otter_suffix" ] ||
        [ -n "$client_build_hosts" ]; then
        {
            echo; env
            echo
        } | sed -e 's/^/| /'
        die 10 "Environment variables are set, likely intended to affect the build, but I am due to ssh elsewhere & they would be lost\n"
    fi

    ssh "$go_host" "otterlace_overnight --here $*"
elif [ "$1" = '--here' ]; then
    shift

    # prevent the Zircon tests, because t/exists.t is broken
    unset DISPLAY

    do_build "$@"
else
    show_syntax
fi
