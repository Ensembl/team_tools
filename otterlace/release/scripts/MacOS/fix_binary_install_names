#!/usr/bin/env perl

### fix_binary_install_names

use strict;
use warnings;
use File::Spec;
use Getopt::Long qw{ GetOptions };

my $application_dir;

{
    my $undo_flag = 0;
    my $usage = sub { exec('perldoc', $0) };
    GetOptions(
        'undo!'     => \$undo_flag,
        'h|help!'   => $usage,
        ) or $usage->();
    $application_dir = shift;
    unless ($application_dir and $application_dir =~ /\.app$/) {
        $usage->();
    }
    $application_dir =~ s{/$}{};

    # "find -type f" excludes symbolic links
    my $find_libs = [ 'find', $application_dir, qw{ -type f -and ( -name *.dylib -or -name *.so -or -name *.bundle ) } ];
    my $find_exe  = [ 'find', $application_dir, qw{ -type f -and -perm +111 -and -not -name *.a                      } ];

    foreach my $find ($find_libs, $find_exe) {
        if ($undo_flag) {
            change_install_names(\&get_loader_paths_to_rename, @$find);
        }
        else {
            change_install_names(\&get_app_paths_to_rename, @$find);
        }
    }
}

sub change_install_names {
    my ($paths_func, @find) = @_;

    open my $FILE_FIND, '-|', @find or die "Error starting find: '@find |'; $!";

    my $install_name_tool = 'install_name_tool';
    my $app_i_n_t = "${application_dir}/Contents/Resources/bin/${install_name_tool}";
    if ( -x $app_i_n_t ) {
        $install_name_tool = $app_i_n_t;
    }
    # print STDERR "i_n_t: ${install_name_tool}";

    while (<$FILE_FIND>) {
        chomp;
        my $path = $_;
        next if is_dylib_stub($path);

        my @rename;
        my $id_change_file = undef;
        if (my ($lib_id_change) = $paths_func->($path, '-D')) {
            $id_change_file = $lib_id_change->[0];
            push(@rename, '-id', $lib_id_change->[1]);
        }
        my @info = $paths_func->($path, '-L');
        foreach my $change (@info) {
            my ($old_path, $new_path) = @$change;
            if ($id_change_file and $old_path eq $id_change_file) {
                # The library's install name is being changed using "-id"
                # so don't add a useless "-change" to the command line.
                next;
            }
            push(@rename, '-change', $old_path, $new_path);
        }
        next unless @rename;
        unshift @rename, $install_name_tool;
        push @rename, $path;
        print STDERR "\n$path\n";
        next;
        my $mode = (stat $path)[2];
        # print STDERR "Command: @rename\n";
        # Run install_name_tool
        chmod 0755, $path
          or die "Failed to make '$path' writable; $!";
        system(@rename) == 0
          or die "Error running '@rename'; exit $?";
        chmod $mode, $path
          or die sprintf("Failed to change '%s' back to %#o; $!", $path, $mode);
    }
    close $FILE_FIND or die "Error running find: '@find |'; exit $?";
}

sub is_dylib_stub {
    my ($path) = @_;
    my @otool = ('otool', '-hv', $path);

    my @lines;
    open my $OTOOL, '-|', @otool or die "Error starting '@otool |'; $!";
    while (<$OTOOL>) {
        push @lines, $_;
    }
    close $OTOOL or die "Error closing '@otool |'; $!";

    my $last_line = pop @lines;
    return $last_line =~ /DYLIB_STUB/;
}

sub get_app_paths_to_rename {
    my ($path, $otool_flag) = @_;

    my ($dir, $file) = app_dir_and_file($path);

    my @otool = ('otool', $otool_flag, $path);
    open my $OTOOL, '-|', @otool or die "Error starting '@otool |'; $!";
    my $first_line = <$OTOOL>;
    my @info;
    while (<$OTOOL>) {
        my ($old_path) = split;
        my $new_path;
        if (my ($d, $f) = app_dir_and_file($old_path)) {
            my $rel_path = File::Spec->abs2rel($d, $dir);
            $new_path = '@loader_path';
            unless ($rel_path eq '.') {
                $new_path .= "/$rel_path";
            }
            $new_path .= "/$f";
        }
        elsif ($f = bad_otter_bin($path, $old_path)) {
            # This hard-codes knowledge of the container layout, but it'll do for now.
            $new_path = '@loader_path/../../../lib/' . $f;
        }
        else {
            next;
        }
        push @info, [$old_path, $new_path] if $new_path;
    }
    return @info;
}

sub app_dir_and_file {
    my ($path) = @_;

    my ($d, $f) = $path =~ m{\.app/(.+)/([^/]+)$};
    if ($d and $f) {
        return ($d, $f);
    }
    else {
        return;
    }
}

sub bad_otter_bin {
    my ($obj_path, $res_path) = @_;

    return unless $obj_path =~ m{/otter/otter_rel.+/bin/};

    # eg: @loader_path/libgtk-x11-2.0.0.dylib
    my ($f) = $res_path =~ m{\@loader_path/([^/]+)$};

    return $f;
}

sub get_loader_paths_to_rename {
    my ($path, $otool_flag) = @_;

    my @otool = ('otool', $otool_flag, $path);
    open my $OTOOL, '-|', @otool or die "Error starting '@otool |'; $!";
    my $first_line = <$OTOOL>;
    my @info;
    while (<$OTOOL>) {
        my ($old_path) = split;
        my $new_path;
        if (my ($f) = $old_path =~ m{^\@loader_path/(?:\.\./)+([^/]+)$}) {
            if ($f =~ m{/}) {
                $new_path = "$application_dir/Contents/Resources/$f";
            }
            else {
                # Already broken - add a lib/
                # This happens when code is compiled against libraries
                # containing @loader_path's
                $new_path = "$application_dir/Contents/Resources/lib/$f";
            }

            # A few libraries which can't otherwise be found can be found by
            # looking back up the tree of the path to the binary:
            unless (-f $new_path || -l $new_path) {
                my @pth = split m{/}, $path;
                pop(@pth);
                while (@pth) {
                    my $test_path = join('/', @pth, $f);
                    if (-f $test_path || -l $test_path) {
                        $new_path = $test_path;
                        last;
                    }
                    pop(@pth);
                }
            }
        }
        else {
            next;
        }
        if (-f $new_path || -l $new_path) {
            push @info, [$old_path, $new_path]
        }
        else {
            warn "No such file: $new_path\n  changing: $old_path\n  inside: $path\n";
        }
    }
    return @info;
}


__END__

=head1 NAME - fix_binary_install_names

=head1 USAGE

  fix_binary_install_names [-undo] <PATH_TO_DOT_APP_DIR>

=head1 EXAMPLE

  fix_binary_install_names /Applications/otter.app

=head1 PARAMETERS

=over 4

=item PATH_TO_DOT_APP_DIR

The path to the .app directory of the app to be fixed.

=item -undo

Revert @loader_path paths to full application paths.

=back

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk
