The scripts in this directory and corresponding config files in
otterlace/release/etc/MacOS should allow an ab-initio build of the Mac
otterlace environment, and then of annotools and otterlace itself.

See also http://mediawiki.internal.sanger.ac.uk/wiki/index.php/MacPorts


Recipe:

cd ~/Dist # or wherever you want to do your app building

setup_app_skeleton.sh otterlace.app

  # sets up the otterlace.app directory tree, including symlinks out
  # of the tree for var and share. attempts to share macports
  # distfiles if appropriate.


cd otterlace.app

install_macports.sh

  # downloads, configures and installs MacPorts for and into the app
  # tree.
  #  (ignore instructions to run "sudo port -v selfupdate" as this
  #   is done for you by install_macports.sh.)
  #
  # configures MacPorts to use the WTSI internal mirror
  #  (see http://mediawiki.internal.sanger.ac.uk/index.php/MacPorts)
  #
  # sets up a local tree for locally-patched port files.
  #
  # creates and runs
  #  ./Contents/Resources/sbin/port_update.sh
  # which performs a 'port selfupdate' to get the ports database,
  # and also indexes the local portfiles.
  # (port_update.sh can be run again at a future date if required.)

# Check the values of portautoclean and keeplogs in
#    otterlace.app/Contents/Resources/etc/macports/macports.conf
#
# Do you want to retain build files and logs for debugging?

install_ports.sh

  # uses MacPorts to install all the ports listed in
  # etc/MacOs/ports.list


install_cpan_bundle.sh

  # configures cpan and sets up the distroprefs mechanism to tailor
  # the installation of some modules.  uses cpan to install the
  # modules listed in etc/MacOS/Bundle/Otterlace/MacOS.pm
  # (which are not available in MacPorts)


cleanup_ports.sh

  # Removes ports only needed for the build.
  # Also removes static libraries (except libperl.a).


install_annotools_prereqs.sh <path to zmap build directory>

  # compiles and installs ACEDB and libAceConn, which don't need to
  # be reinstalled every time there's a new ZMap.

  # at this point, an image can be saved to use as the basis for
  # future builds, until such time as ACEDB changes.


install_annotools.sh <path to zmap build directory>

  # configures, compiles and installs ZMap, SeqTools and XRemote.


install_otterlace.sh <path to ensembl-otter git checkout>

  # runs otterlace_build with suitable arguments to install
  # otter client.


# Test the build here.

  # mg13 note to self:
  #   my environment accesses ~/Dist/otterlace.app.
  #   Put the test app somewhere else for testing, and ensure
  #   ~/Dist/otterlace.app is empty.


  # Make sure the new app is called otterlace.app again, then:

cd ..  # back to ~/Dist
build_sparse_image.sh -r otterlace_mac_intel-<nn>-<mm> otterlace.app

  # builds and populates sparse disk image, except for:

  # Obtain ReadMe.rtfd from previous release, and update it.
  #   cp -pR ReadMe.rtfd /Volumes/otterlace_mac_intel-<MM>-<NN>
  #   hdiutil eject /Volumes/otterlace_mac_intel-<MM>-<NN>


compress_image.sh otterlace_mac_intel-<nn>-<mm>.sparseimage

  # compresses sparse image, producing the .dmg image file.
  # Save the dmg as a backup.


# Utility - these are layout-aware:

clone_app.sh  - clone an app directory and its _non_dist component
rename_app.sh - rename an app directory and its _non_dist component
