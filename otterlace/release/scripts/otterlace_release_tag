#!/bin/bash

# Bumps the version numbers which are stored as files in
# ensembl-otter/dist/conf/ .
#
# Creates tags in Git repositories, acting (more or less) directly
# on the central repositories.  That means you can run the current
# devel tagging script against an existing release branch, treating
# the release as data.
#
# Leaves repositories in a state from which you could VCS-export code
# to build a specific release ($MAJOR-$MINOR)
#
# nb. there are indpendent options for dry-run and operating on dummy
# (scratch) repos


# The plan for bumping the major version:
#
#   we are on "master" branch, doing development
#
#   minor version number is not set
#
#   on the new release branch,
#     keep the old major version,
#     have a minor version bump to .01
#     record the current commitid for (zircon, PerlModules)
#       from ref named in on master:dist/conf/{zircon,PerlModules}
#       into dist/conf/{zircon,PerlModules}
#       and push a tag for that
#
#   on the master branch,
#     keep minor version unset
#     have a major version bump
#     tag it as the next -dev, for the benefit of Bio::Otter::Git
#
# We are then ready for new release & dev builds


# The plan for bumping the minor version:
#
#   start on the "master" branch
#
#   we must obtain the current release
#     subtract one from the apparent version_major
#     checkout this release branch
#
#   on the existing release branch,
#     minor version bump
#     {zircon,PerlModules} version can be updated manually
#       by including ' zircon=c0ffeebea7' with switches
#       but this will not push a tag to the library repository


. "$( dirname "$0" )/_otterlace.sh" || exit 1

[ -n "$ANACODE_ZIRCON" ] && bail "Found ANACODE_ZIRCON=$ANACODE_ZIRCON but feature was withdrawn, please use anacode_source_repo(1) instead"

ensembl_otter_git_repo="$( anacode_source_repo --pushable --purpose otterlace_release_tag ensembl-otter )" \
    || bail "Can't get ensembl_otter_git_repo"
zircon_git_repo="$(        anacode_source_repo --pushable --purpose otterlace_release_tag zircon )" \
    || bail "Can't get zircon_git_repo"
perlmodules_git_repo="$(   anacode_source_repo --pushable --purpose otterlace_release_tag PerlModules )" \
    || bail "Can't get perlmodules_git_repo"


# Dummy repositories for script testing.
_create_dummy_repos() {
    dummies="$( mktemp -d -t DUMMY_REPOS.XXXXXX )" || bail "Failed to mktemp -d"
        # Serious because caller does not want to do real operations

    printf "\n*** Creating and running with dummy repos,\n    dummies=%s\n    these will NOT be cleaned up\n    you can use them again by setting the variable and flag\n\n" "$dummies"

    # Make fake repos
    #  ens-ott is deliberately != ensembl-otter
    #  humscripts is a canary module, should not be changed
    (
        set -e
        cd "$dummies"
        # set -e, cd : local to the ( ... )

        echo ': ensembl-otter'
        git clone -q --bare "$ensembl_otter_git_repo" ens-ott.git
        echo ': PerlModules (was anacode/PerlModules)'
        git clone -q --bare "$perlmodules_git_repo" perlmods.git
        echo ': zircon'
        git clone -q --bare "$zircon_git_repo" zircon.git
    )
}

_use_dummy_repos() {
    if [ -z "$dummies" ]; then
        _create_dummy_repos || bail "Create dummy repos failed"
    elif [ -d "$dummies/ens-ott.git" ]; then
        printf "\n*** Running with existing dummy repos in %s\n" "$dummies"
    else
        bail "No dummy repos at $dummies/ens-ott.git ?"
    fi

    # Replace the "upstream" repositories, so we can perform real VCS
    # operations on them.
    set -x
    ensembl_otter_git_repo="$dummies/ens-ott.git"
    zircon_git_repo="$dummies/zircon.git"
    perlmodules_git_repo="$dummies/perlmods.git"
    set +x
}


sanity_check_version_minor_is_null() {
    # This runs on master of a fresh checkout.  Even when we are about
    # to bump the minor version on an existing release branch.
    sanity_check_version_major_not_null
    [ -z "$( config version_minor )" ] || {
        echo "version_minor '${version_minor}' is not null"
        echo "on master branch? this is weird, cannot proceed with major version bump"
        echo "please fix something and try again"
        # sanity check failed - bail
        exit 1
    } >&2
}

sanity_check_version_major_not_null() {
    # Runs both on master and release branches, at different times
    [ -n "$( config version_major )" ] || {
        echo "version_major is null - weird"
        echo "do we have dist/conf/ on this branch?"
        git branch -v
        exit 1
    } >&2
}

set_variables_bumpmajor() {
    # these variables intentionally not local

    set_variables_bumpminor
    version_major_new="$( printf "%02d" "$(( 10#$version_major + 1 ))" )" || bail "math error"
    dev_tag="humpub-release-${version_major_new}-dev"
}

set_variables_bumpminor() {
    # these variables intentionally not local
    sanity_check_version_major_not_null

    config_get version_major
    config_get old_version_minor version_minor
    version_minor="$( printf "%02d" "$(( 10#$old_version_minor + 1 ))" )" || bail "math error"
    # this works on master "56"."" -> "56"."01" for bumpmajor,
    # and on a release branch "56"."01" -> "56"."02"

    release_branch="humpub-branch-${version_major}"
    release_tag="humpub-release-${version_major}-${version_minor}"
}

# changes $PWD
# sets global variables
git_eo_update() {
    git clone -q -b master "$ensembl_otter_git_repo" ensembl-otter &&
    cd ensembl-otter &&
    sanity_check_version_minor_is_null &&

    if [ "$do_op" = "major" ]; then
        do_bumpmajor
    elif [ "$do_op" = "minor" ]; then
        do_bumpminor
    else
        echo "Puzzled: $do_op" >&2
        false
    fi &&

    git push ${dryrun:+-n} origin master "$release_tag" $dev_tag "$release_branch" &&
    # pushing master is not always necessary, but a no-op is safe.
    #
    # $dev_tag may be empty, in which case it is not pushed (no
    # quotes, else we push "" which breaks)

    true
}

do_bumpmajor() {
    local ver_zirc ver_PeMo
    set_variables_bumpmajor &&

    # release branch and tags
    git checkout -b "$release_branch" &&
    config_set version_minor "$version_minor" &&
    ver_zirc="$( mk_version zircon )" &&
    ver_PeMo="$( mk_version PerlModules )" &&
    config_set zircon      "$ver_zirc" &&
    config_set PerlModules "$ver_PeMo" &&
    maybe_set_conf &&
    git commit -a -m "$( printf "New release branch.\n\nNext release will be ${release_tag};\nGenerated by %s\n" "$thisprog" )" &&
    git tag "$release_tag" &&
    git_show_maybe &&
    git_listrefs_maybe &&
    config_show_maybe &&

    # version bump
    git checkout master &&
    $dist_scripts/otterlace_version_major_set "$version_major_new" &&
    git tag "$dev_tag" &&
    git_show_maybe &&
    config_show_maybe &&

    true
}

# May update $bumprel
do_bumpminor() {
    local dev_major
    if [ "$bumprel" = "last" ]; then
        config_get dev_major version_major
        bumprel="$( printf "%02d" "$(( 10#$dev_major - 1 ))" )" || bail "math error"
        echo " : Current development is v$dev_major"
    fi

    echo ' : Did nothing to dist/conf/zircon'
    echo ' : Did nothing to dist/conf/PerlModules'

    git checkout "humpub-branch-$bumprel" &&
    echo " : Using release branch v$bumprel" &&

    set_variables_bumpminor &&

    # release tag
    config_set version_minor "$version_minor" &&
    maybe_set_conf &&
    git commit -a -m "$( printf "New release tag %s\n\nGenerated by %s\n" "$release_tag" "$thisprog" )" &&
    git tag "$release_tag" &&
    git_show_maybe &&
    git_listrefs_maybe &&
    config_show_maybe &&
    true
}


maybe_set_conf() {
    if [ -n "$do_set_conf" ]; then
        printf "Doing (%s) to %s\n" "$do_set_conf" "$( git describe --tags --dirty )"
        eval "$do_set_conf"
    fi
}


mk_version() {
    local repo_name repo_url repo_version

    repo_name=$1
    case $repo_name in
        zircon)      repo_url=$zircon_git_repo ;;
        PerlModules) repo_url=$perlmodules_git_repo ;;
        *) bail "mk_version $repo_name: unknown" ;;
    esac

    config_get repo_version $repo_name
    (
        cd "$tmp_dir" &&
        git clone -q "$repo_url" $repo_name &&
        cd $repo_name &&
        if git tag -l | grep -qE "^$release_tag\$"; then
            # Tag exists
            :
        else
            git tag -a -m "Tag made at current $repo_version for use in Otterlace,
(FYI.  dist/conf/$repo_name defines it from the other end.)" \
                "$release_tag" "$repo_version" &&
            git push ${dryrun:+-n} --tags
            # It's not clear we need to keep these tags.  We could
            # delete them or stop creating them.  They provide a
            # putative idempotence which a successful run of this
            # script will not use.
        fi &&
        git log -1 --format=%H "$release_tag"
    ) &&
    true
}


# Sets variables.  May exit.
parse_switches() {
    local sw
    while [ $# -gt 0 ]; do
        sw=$1
        shift
        case $sw in
            --major) _setop major   ;;
            --minor) _setop minor
                bumprel=last
                case $1 in
                    [0-9][0-9] | [0-9][0-9][0-9] )
                        bumprel=$1
                        shift
                        ;;
                esac
                ;;
            -v | --verbose)  verbose=1      ;;
            -D | --dummy)    with_dummy=1   ;;
            -n | --dryrun)   dryrun=1       ;;
            -h | --help)
                show_syntax
                exit 0
                ;;
            *=*)
                do_set_conf="${do_set_conf:+$do_set_conf && }config_set \"$( echo "$sw" | cut -d= -f1 )\" \"$( echo "$sw" | cut -d= -f2- )\""
                ;;
            *)
                bail "Unknown option '$sw', try -h"
                ;;
        esac
    done
}

_setop() {
    if [ -n "$do_op" ]; then
        bail "Already planning to do '$do_op', cannot also do '$1'"
    fi
    do_op=$1
}


show_syntax() {
    local prog
    prog="$( basename "$0" )"
    echo "Syntax: $prog [ -v ] [ -D ] [-n] < --major | --minor [NN] >  [ 'conf_key=conf value' ]*"
    cat <<MSG

Necessary switches - one of

  --major      Tag new release branch and matching .01 minor release.

  --minor NN   Tag new minor release on the existing branch for major
               version NN.

  --minor      Tag new minor release on the latest release branch.
               Uses (current master's major release number) minus one.


Optional switches:

  -D
  --dummy    Make in TMPDIR some local Git repositories,
             and use these instead of the real ones.

  -n
  --dryrun   Perform noisy no-ops instead of VCS commands.

  -v
  --verbose  More noise


Further changes to dist/conf/foo may be given with 'foo=bar' after the
switches.  These are applied to the release branch, not master.  There
is no expansion or special treatment of values, they are just text.


This is $thisprog

MSG
}


main() {
    local tmp_dir
#    echo "Doing these: do_op=$do_op bumprel=$bumprel verbose=$verbose dryrun=$dryrun with_dummy=$with_dummy"

    if [ -z "$do_op" ]; then
        echo "Missing a necessary option"
        show_syntax >&2
        return 4
    fi

    if $dist_scripts/git-is-synced; then
        echo "Your working copy is in sync.  It will be safe to pull after the bump."
    elif [ -n "$dryrun" ]; then
        echo "Your working copy is NOT in sync, but this is a dry run"
    else
        echo "Your working copy is NOT in sync.  Is this a good idea?" >&2
        return 3
    fi

    tmp_dir="$( mktemp -d -t "$( basename "$0" ).XXXXXX" )" || bail "mktemp failed"

    if [ -n "$with_dummy" ]; then
        _use_dummy_repos
    elif [ -n "$dummies" ]; then
        bail "Found dummies=$dummies but not given --dummy flag"
        # continuing is probably not what the caller expected
    fi

    ( cd "$tmp_dir" &&
        git_eo_update &&
        true ) &&

    if [ -n "$with_dummy" ]; then
        echo "# Would 'git pull -v --ff-only' to your working copy here, but"
        echo "# we are using dummy repos so here is a dry-run fetch instead"
        echo "git fetch --dry-run $ensembl_otter_git_repo, as if from origin:"
        git fetch --dry-run $ensembl_otter_git_repo 'refs/heads/*:refs/remotes/origin/*' 'refs/tags/*:refs/tags/*'
        # The explicit tags fetch is redundant unless there are tags
        # which are not on branches, and is verbose because we dry-run
        echo "Or    (cd $ensembl_otter_git_repo; gitk --all &)"
    else
        ${dryrun:+echo DRYRUN:} git pull -v --ff-only
    fi &&

    rm -rf -- "$tmp_dir" &&
    true # success
}


parse_switches "$@"

main
exit $?
