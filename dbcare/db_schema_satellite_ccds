#!/software/bin/perl

use strict;
use warnings;

use DBI;
use Term::ReadKey qw( ReadMode ReadLine );

my $host_user = "ottadmin";

print STDERR "Enter password for ${host_user}: ";
ReadMode("noecho");
my $host_password = ReadLine(0);
print STDERR "\n";
chomp $host_password;
ReadMode("normal");

sub filter_loutre { return ! /^loutre_act/ }
sub filter_pipe { return 1 }

my $hosts = [

    {
        name => "otterlive",
        port => 3324,
        pattern => 'loutre_%',
        filter => \&filter_loutre,
    },

    {
        name => "otterpipe1",
        port => 3322,
        pattern => 'pipe_%',
        filter => \&filter_pipe,
    },

    {
        name => "otterpipe2",
        port => 3323,
        pattern => 'pipe_%',
        filter => \&filter_pipe,
        extras => [ qw( chromoDB jgrg_human_test jgrg_human_dev ) ],
    },

    ];

my $host_database_key_value_hash = { };
sub fix {
    my ($host, $dbh, $database) = @_;
    my $sql = qq(select meta_key, meta_value from ${database}.meta);
    for (@{$dbh->selectall_arrayref($sql)}) {
        my ($key, $value) = @{$_};
        next unless my ($satellite) = $value =~
            /'-dbname'[[:blank:]]*=>[[:blank:]]*'([^']*)'/;
        next unless $satellite =~ /ccds/;
        $host_database_key_value_hash->{$host->{name}}{$database}{$key}{$value}++;
    }
    # $dbh->commit;
    return;
}

for my $host (@{$hosts}) {

    my ($host_name, $host_port, $host_pattern, $host_filter, $host_extras) =
        @{$host}{qw( name port pattern filter extras )};
    $host_extras ||= [ ];

    my $dsn = sprintf "DBI:mysql:host=%s;port=%d", $host_name, $host_port;
    my $otter_dbh = DBI->connect(
        $dsn, $host_user, $host_password
        , { RaiseError => 1, AutoCommit => 0, });

    my $database_select_sql =
        sprintf "show databases like '%s'", $host_pattern;
    my $host_databases = [
        grep { $host_filter->() } @{$otter_dbh->selectcol_arrayref($database_select_sql)},
        ];

    for (@{$host_databases}, @{$host_extras}) {
        # catch any error message and reraise it with context prepended
        die qq($host->{name}: $_: $@) unless eval {
            fix $host, $otter_dbh, $_;
            1;
        };
    }

    $otter_dbh->disconnect;
}

for my $host (sort keys %{$host_database_key_value_hash}) {
    my $database_key_value_hash = $host_database_key_value_hash->{$host};
    for my $database (sort keys %{$database_key_value_hash}) {
        my $key_value_hash = $database_key_value_hash->{$database};
        for my $key (sort keys %{$key_value_hash}) {
            my $value_hash = $key_value_hash->{$key};
            for my $value (sort keys %{$value_hash}) {
                printf qq(%s.%s: %s => '%s'\n), $host, $database, $key, $value;
            }
        }
    }
}
