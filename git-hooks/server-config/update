#!/bin/sh
#
# An example hook script to blocks unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "Usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --bool hooks.allowunannotated)
denycreatebranch=$(git config --bool hooks.denycreatebranch)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero="0000000000000000000000000000000000000000"
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,delete)
		# delete tag
		# (allow it as a get-out)
		;;
	refs/tags/*,tag|refs/tags/*,commit)
		# annotated tag
		# un-annotated tag
		if git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository (and is anyway often ineffective)." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
                    # create
		    echo "*** Creating a branch is not allowed in this repository" >&2
		    exit 1
                elif [ "$refname" = "refs/heads/live" ]; then
                    # push to 'live' branch
		    if git rev-parse dev > /dev/null 2>&1 && git log --format=%H dev | grep -x -q "$newrev"; then
                        # seen on dev = OK
                        :
                    else
                        echo "*** Cannot accept push $refname=$newrev until it has been pushed to dev." >&2
                        exit 1
                    fi
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		echo "*** Explicitly deleting a branch is not allowed in this repository.  Please push a commit containing no files, so it can be merged." >&2
		exit 1
		;;
	refs/remotes/*,commit)
		# tracking branch
		echo "*** No remote branches allowed here ($GIT_DIR)" >&2
                exit 1
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0
